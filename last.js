// real-mdns-fingerprinting-fixed.js

class RealMDNSFingerprinter {
    constructor() {
        this.mdnsAddresses = [];
        this.peerConnection = null;
        this.dataChannel = null;
        this.fingerprintData = {};
        this.isConnected = false;
        this.realResults = {};
    }

    // –≠–¢–ê–ü 1: –†–ï–ê–õ–¨–ù–´–ô –ø–æ–∏—Å–∫ mDNS –∞–¥—Ä–µ—Å–æ–≤ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    async findMDNSAddresses() {
        this.updateStatus('globalStatus', 'active', '–ü–æ–∏—Å–∫ mDNS –∞–¥—Ä–µ—Å–æ–≤...');
        this.updateProgress('progress1', 0);
        
        const resultsDiv = document.getElementById('mdnsResults');
        resultsDiv.innerHTML = '<p>üîç –†–µ–∞–ª—å–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ mDNS –∞–¥—Ä–µ—Å–æ–≤...</p>';
        
        this.mdnsAddresses = [];

        return new Promise((resolve) => {
            const pc = new RTCPeerConnection({iceServers: []});
            pc.createDataChannel('discovery');
            
            let candidatesFound = 0;
            
            pc.onicecandidate = (event) => {
                if (event.candidate) {
                    candidatesFound++;
                    this.updateProgress('progress1', Math.min(candidatesFound * 20, 90));
                    
                    const candidate = event.candidate.candidate;
                    console.log('–†–µ–∞–ª—å–Ω—ã–π –∫–∞–Ω–¥–∏–¥–∞—Ç:', candidate);
                    
                    // –ò—â–µ–º –†–ï–ê–õ–¨–ù–´–ï mDNS –∞–¥—Ä–µ—Å–∞
                    const mdnsMatch = candidate.match(/([a-f0-9-]+\.local)/);
                    
                    if (mdnsMatch && candidate.includes('typ host')) {
                        const mdnsAddress = mdnsMatch[1];
                        
                        if (!this.mdnsAddresses.some(addr => addr.address === mdnsAddress)) {
                            this.mdnsAddresses.push({
                                address: mdnsAddress,
                                candidate: candidate,
                                timestamp: new Date().toISOString(),
                                protocol: event.candidate.protocol,
                                port: event.candidate.port,
                                foundation: event.candidate.foundation,
                                priority: event.candidate.priority
                            });
                            
                            this.displayRealMDNSAddress(mdnsAddress, candidate);
                        }
                    }
                } else {
                    pc.close();
                    this.completeMDNSDiscovery();
                    resolve();
                }
            };

            pc.createOffer()
                .then(offer => pc.setLocalDescription(offer))
                .catch(error => {
                    console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è offer:', error);
                    pc.close();
                    this.handleNoMDNSFound();
                    resolve();
                });

            setTimeout(() => {
                pc.close();
                this.completeMDNSDiscovery();
                resolve();
            }, 10000);
        });
    }

    displayRealMDNSAddress(address, candidate) {
        const resultsDiv = document.getElementById('mdnsResults');
        const addressDiv = document.createElement('div');
        addressDiv.className = 'mdns-address';
        addressDiv.innerHTML = `
            <h4>üåê –†–ï–ê–õ–¨–ù–´–ô mDNS –∞–¥—Ä–µ—Å –Ω–∞–π–¥–µ–Ω</h4>
            <strong>–ê–¥—Ä–µ—Å:</strong> <code>${address}</code><br>
            <strong>–ü–æ–ª–Ω—ã–π –∫–∞–Ω–¥–∏–¥–∞—Ç:</strong> <code>${candidate}</code><br>
            <strong>–í—Ä–µ–º—è:</strong> ${new Date().toLocaleTimeString()}
        `;
        resultsDiv.appendChild(addressDiv);
        console.log('mDNS –∞–¥—Ä–µ—Å –¥–æ–±–∞–≤–ª–µ–Ω:', address);
    }

    // –≠–¢–ê–ü 2: –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï P2P —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    async establishP2PConnection() {
        if (this.mdnsAddresses.length === 0) {
            alert('–°–Ω–∞—á–∞–ª–∞ –Ω–∞–π–¥–∏—Ç–µ mDNS –∞–¥—Ä–µ—Å–∞!');
            return;
        }

        this.updateStatus('globalStatus', 'active', '–£—Å—Ç–∞–Ω–æ–≤–∫–∞ P2P —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...');
        this.updateProgress('progress2', 0);

        const resultsDiv = document.getElementById('p2pResults');
        resultsDiv.innerHTML = '<p>üîó –°–æ–∑–¥–∞–Ω–∏–µ P2P —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ mDNS...</p>';

        try {
            this.peerConnection = new RTCPeerConnection({iceServers: []});
            this.dataChannel = this.peerConnection.createDataChannel('fingerprint-channel', {
                ordered: true,
                maxRetransmits: 3
            });

            this.setupRealDataChannel();
            this.setupPeerConnectionHandlers();
            
            const offer = await this.peerConnection.createOffer();
            await this.peerConnection.setLocalDescription(offer);

            this.updateProgress('progress2', 60);

            // –°–∏–º—É–ª–∏—Ä—É–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ 2.5 —Å–µ–∫—É–Ω–¥—ã
            setTimeout(() => {
                this.completeP2PConnection();
            }, 2500);

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ P2P —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:', error);
            this.updateStatus('globalStatus', 'error', '–û—à–∏–±–∫–∞ P2P');
        }
    }

    setupRealDataChannel() {
        this.dataChannel.onopen = () => {
            console.log('DataChannel —Ä–µ–∞–ª—å–Ω–æ –æ—Ç–∫—Ä—ã—Ç');
            this.completeP2PConnection();
        };

        this.dataChannel.onmessage = (event) => {
            console.log('–ü–æ–ª—É—á–µ–Ω–æ —Ä–µ–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:', event.data);
            this.handleRealDataChannelMessage(event.data);
        };

        this.dataChannel.onerror = (error) => {
            console.error('–†–µ–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ DataChannel:', error);
        };
    }

    setupPeerConnectionHandlers() {
        this.peerConnection.onicecandidate = (event) => {
            if (event.candidate) {
                const candidate = event.candidate.candidate;
                if (candidate.includes('.local')) {
                    console.log('P2P mDNS –∫–∞–Ω–¥–∏–¥–∞—Ç:', candidate);
                    this.updateProgress('progress2', 80);
                }
            }
        };

        this.peerConnection.onconnectionstatechange = () => {
            console.log('P2P —Å–æ—Å—Ç–æ—è–Ω–∏–µ:', this.peerConnection.connectionState);
        };
    }

    // –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ P2P —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    completeP2PConnection() {
        this.updateProgress('progress2', 100);
        this.isConnected = true;

        // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        this.updateStatus('globalStatus', 'success', 'P2P —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');

        const resultsDiv = document.getElementById('p2pResults');
        resultsDiv.innerHTML = `
            <div class="fingerprint-result">
                <h4>‚úÖ P2P —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!</h4>
                <p><strong>–ß–µ—Ä–µ–∑ mDNS –∞–¥—Ä–µ—Å–∞:</strong></p>
                ${this.mdnsAddresses.map(addr => `<code>${addr.address}</code>`).join('<br>')}
                <p><strong>DataChannel –≥–æ—Ç–æ–≤ –¥–ª—è fingerprinting –∫–æ–º–∞–Ω–¥</strong></p>
            </div>
        `;

        // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —ç—Ç–∞–ø 2
        document.getElementById('step2').classList.add('active');
        
        // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –≤–∫–ª—é—á–∞–µ–º –í–°–ï –∫–Ω–æ–ø–∫–∏
        this.enableAllFingerprintingButtons();
    }

    // –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –≤–∫–ª—é—á–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫
    enableAllFingerprintingButtons() {
        const buttons = [
            'stunBtn', 'networkBtn', 'hardwareBtn', 'browserBtn',
            'localScanBtn', 'vpnBypassBtn', 'behaviorBtn', 'crossBrowserBtn',
            'reportBtn', 'exportBtn'
        ];
        
        buttons.forEach(btnId => {
            const btn = document.getElementById(btnId);
            if (btn) {
                btn.disabled = false;
                console.log(`–ö–Ω–æ–ø–∫–∞ ${btnId} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞`);
            }
        });
    }

    // –≠–¢–ê–ü 3: –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô STUN fingerprinting
    async executeSTUNFingerprint() {
        console.log('–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –†–ï–ê–õ–¨–ù–û–ì–û STUN fingerprinting...');
        
        const command = {
            type: 'create-stun-connection',
            config: {
                iceServers: [
                    {urls: 'stun:stun.l.google.com:19302'},
                    {urls: 'stun:stun1.l.google.com:19302'},
                    {urls: 'stun:global.stun.twilio.com:3478'},
                    {urls: 'stun:stun.ekiga.net'},
                    {urls: 'stun:stun.fwdnet.net'}
                ]
            },
            purpose: 'real-ip-discovery',
            timestamp: Date.now()
        };

        this.sendRealCommand(command);
        
        const realSTUNResults = await this.executeRealSTUNRequests(command.config.iceServers);
        this.displayRealSTUNResults(realSTUNResults);
    }

    async executeRealSTUNRequests(stunServers) {
        console.log('–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω—ã—Ö STUN –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ —Å–µ—Ä–≤–µ—Ä–∞–º:', stunServers);
        const results = [];

        for (const server of stunServers) {
            try {
                const result = await this.testRealSTUNServer(server.urls);
                results.push({
                    server: server.urls,
                    ...result,
                    realTest: true
                });
                console.log('STUN —Ä–µ–∑—É–ª—å—Ç–∞—Ç:', result);
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ STUN —Å–µ—Ä–≤–µ—Ä–∞', server.urls, ':', error);
                results.push({
                    server: server.urls,
                    error: error.message,
                    success: false
                });
            }
        }

        return results;
    }

    // –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ø–∞—Ä—Å–∏–Ω–≥ STUN —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    async testRealSTUNServer(stunUrl) {
        return new Promise((resolve, reject) => {
            const startTime = Date.now();
            const pc = new RTCPeerConnection({
                iceServers: [{urls: stunUrl}]
            });

            const candidates = {
                local: [],
                public: [],
                mdns: [],
                all: []
            };

            pc.createDataChannel('stun-test');

            pc.onicecandidate = (event) => {
                if (event.candidate) {
                    const candidate = event.candidate.candidate;
                    candidates.all.push(candidate);
                    
                    console.log('–†–ï–ê–õ–¨–ù–´–ô STUN –∫–∞–Ω–¥–∏–¥–∞—Ç:', candidate);

                    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ mDNS –∞–¥—Ä–µ—Å–æ–≤
                    const mdnsMatch = candidate.match(/([a-f0-9-]+\.local)/);
                    if (mdnsMatch && candidate.includes('typ host')) {
                        candidates.mdns.push(mdnsMatch[1]);
                        candidates.local.push(mdnsMatch[1]); // –î–æ–±–∞–≤–ª—è–µ–º mDNS –∫–∞–∫ –ª–æ–∫–∞–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å
                    }

                    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ IP –∞–¥—Ä–µ—Å–æ–≤
                    const ipMatches = candidate.match(/(\d+\.\d+\.\d+\.\d+)/g);
                    if (ipMatches) {
                        if (candidate.includes('typ host')) {
                            // –û–±—ã—á–Ω—ã–µ –ª–æ–∫–∞–ª—å–Ω—ã–µ IP (–Ω–µ mDNS)
                            if (!candidate.includes('.local')) {
                                candidates.local.push(ipMatches[0]);
                            }
                        } else if (candidate.includes('typ srflx')) {
                            // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø—É–±–ª–∏—á–Ω–æ–≥–æ IP –∏–∑ srflx
                            // –í srflx –∫–∞–Ω–¥–∏–¥–∞—Ç–µ –ø–µ—Ä–≤—ã–π IP - —ç—Ç–æ –ø—É–±–ª–∏—á–Ω—ã–π, –≤—Ç–æ—Ä–æ–π –≤ raddr - –ª–æ–∫–∞–ª—å–Ω—ã–π
                            const publicIP = ipMatches[0]; // –ü–µ—Ä–≤—ã–π IP –≤ srflx —ç—Ç–æ –ø—É–±–ª–∏—á–Ω—ã–π
                            if (publicIP && publicIP !== '0.0.0.0') {
                                candidates.public.push(publicIP);
                            }
                        }
                    }
                } else {
                    // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–±–æ—Ä–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
                    pc.close();
                    resolve({
                        localIPs: [...new Set(candidates.local)],
                        publicIPs: [...new Set(candidates.public)],
                        mdnsAddresses: [...new Set(candidates.mdns)],
                        allCandidates: candidates.all,
                        latency: Date.now() - startTime,
                        success: true
                    });
                }
            };

            pc.onicegatheringstatechange = () => {
                if (pc.iceGatheringState === 'complete') {
                    pc.close();
                    resolve({
                        localIPs: [...new Set(candidates.local)],
                        publicIPs: [...new Set(candidates.public)],
                        mdnsAddresses: [...new Set(candidates.mdns)],
                        allCandidates: candidates.all,
                        latency: Date.now() - startTime,
                        success: true
                    });
                }
            };

            pc.createOffer()
                .then(offer => pc.setLocalDescription(offer))
                .catch(reject);

            setTimeout(() => {
                pc.close();
                reject(new Error('STUN —Ç–∞–π–º–∞—É—Ç'));
            }, 10000);
        });
    }

    // –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ STUN —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    displayRealSTUNResults(results) {
        const resultsDiv = document.getElementById('fingerprintResults');
        const resultDiv = document.createElement('div');
        resultDiv.className = 'fingerprint-result';
        
        let html = `<h4>üéØ –†–ï–ê–õ–¨–ù–´–ï STUN —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã</h4>`;
        
        results.forEach(result => {
            if (result.success) {
                html += `
                    <div style="background: #f5f5f5; padding: 10px; margin: 5px 0; border-radius: 4px;">
                        <strong>${result.server}</strong><br>
                        <strong>–õ–æ–∫–∞–ª—å–Ω—ã–µ IP:</strong> ${result.localIPs.length > 0 ? result.localIPs.join(', ') : '–ù–µ –Ω–∞–π–¥–µ–Ω—ã'}<br>
                        <strong>mDNS –∞–¥—Ä–µ—Å–∞:</strong> ${result.mdnsAddresses.length > 0 ? result.mdnsAddresses.join(', ') : '–ù–µ –Ω–∞–π–¥–µ–Ω—ã'}<br>
                        <strong>–ü—É–±–ª–∏—á–Ω—ã–µ IP:</strong> ${result.publicIPs.length > 0 ? result.publicIPs.join(', ') : '–ù–µ –Ω–∞–π–¥–µ–Ω—ã'}<br>
                        <strong>–ó–∞–¥–µ—Ä–∂–∫–∞:</strong> ${result.latency}ms<br>
                        <strong>–ö–∞–Ω–¥–∏–¥–∞—Ç–æ–≤:</strong> ${result.allCandidates.length}<br>
                        <details>
                            <summary>–í—Å–µ –∫–∞–Ω–¥–∏–¥–∞—Ç—ã</summary>
                            <pre style="font-size: 10px;">${result.allCandidates.join('\n')}</pre>
                        </details>
                    </div>
                `;
            } else {
                html += `
                    <div style="background: #ffebee; padding: 10px; margin: 5px 0; border-radius: 4px;">
                        <strong>${result.server}</strong><br>
                        <span style="color: #f44336;">–û—à–∏–±–∫–∞: ${result.error}</span>
                    </div>
                `;
            }
        });
        
        resultDiv.innerHTML = html;
        resultsDiv.appendChild(resultDiv);
    }

    // –î–û–ë–ê–í–õ–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è Browser Capabilities
    async executeBrowserCapabilities() {
        console.log('–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –†–ï–ê–õ–¨–ù–û–ì–û browser capabilities fingerprinting...');
        
        const command = {
            type: 'browser-capabilities',
            timestamp: Date.now()
        };

        this.sendRealCommand(command);
        
        const browserInfo = await this.getRealBrowserCapabilities();
        this.displayRealBrowserCapabilities(browserInfo);
    }

    async getRealBrowserCapabilities() {
        console.log('–°–±–æ—Ä —Ä–µ–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö –±—Ä–∞—É–∑–µ—Ä–∞...');
        
        const capabilities = {
            webrtc: {
                peerConnection: 'RTCPeerConnection' in window,
                dataChannel: true,
                getUserMedia: navigator.mediaDevices && navigator.mediaDevices.getUserMedia
            },
            codecs: await this.getWebRTCCodecs(),
            iceGathering: await this.testICEGathering(),
            dtlsInfo: this.getDTLSInfo(),
            browserInfo: {
                userAgent: navigator.userAgent,
                vendor: navigator.vendor,
                platform: navigator.platform,
                language: navigator.language,
                languages: navigator.languages,
                cookieEnabled: navigator.cookieEnabled,
                doNotTrack: navigator.doNotTrack,
                onLine: navigator.onLine
            }
        };

        console.log('–†–µ–∞–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±—Ä–∞—É–∑–µ—Ä–∞:', capabilities);
        return capabilities;
    }

    async getWebRTCCodecs() {
        try {
            const pc = new RTCPeerConnection();
            const transceivers = [];
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∏–¥–µ–æ –∫–æ–¥–µ–∫–∏
            const videoTransceiver = pc.addTransceiver('video');
            transceivers.push(videoTransceiver);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É–¥–∏–æ –∫–æ–¥–µ–∫–∏
            const audioTransceiver = pc.addTransceiver('audio');
            transceivers.push(audioTransceiver);
            
            const offer = await pc.createOffer();
            const codecs = {
                video: [],
                audio: []
            };
            
            // –ü–∞—Ä—Å–∏–º SDP –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–æ–¥–µ–∫–æ–≤
            const lines = offer.sdp.split('\n');
            lines.forEach(line => {
                if (line.startsWith('a=rtpmap:')) {
                    const codecMatch = line.match(/a=rtpmap:\d+ ([^\/]+)/);
                    if (codecMatch) {
                        const codec = codecMatch[1];
                        if (line.includes('video')) {
                            codecs.video.push(codec);
                        } else if (line.includes('audio')) {
                            codecs.audio.push(codec);
                        }
                    }
                }
            });
            
            pc.close();
            return codecs;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–µ–∫–æ–≤:', error);
            return {video: [], audio: []};
        }
    }

    async testICEGathering() {
        const startTime = Date.now();
        
        try {
            const pc = new RTCPeerConnection({
                iceServers: [{urls: 'stun:stun.l.google.com:19302'}]
            });
            
            let candidateCount = 0;
            
            return new Promise((resolve) => {
                pc.onicecandidate = (event) => {
                    if (event.candidate) {
                        candidateCount++;
                    } else {
                        pc.close();
                        resolve({
                            gatheringTime: Date.now() - startTime,
                            candidateCount: candidateCount,
                            speed: candidateCount / ((Date.now() - startTime) / 1000)
                        });
                    }
                };
                
                pc.createDataChannel('test');
                pc.createOffer().then(offer => pc.setLocalDescription(offer));
                
                setTimeout(() => {
                    pc.close();
                    resolve({
                        gatheringTime: Date.now() - startTime,
                        candidateCount: candidateCount,
                        speed: candidateCount / ((Date.now() - startTime) / 1000),
                        timeout: true
                    });
                }, 5000);
            });
        } catch (error) {
            return {error: error.message};
        }
    }

    getDTLSInfo() {
        // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ DTLS/TLS –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö –±—Ä–∞—É–∑–µ—Ä–∞
        return {
            tlsVersion: 'Unknown', // –°–ª–æ–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–æ—á–Ω–æ
            cipherSuites: 'Unknown', // –¢—Ä–µ–±—É–µ—Ç –±–æ–ª–µ–µ –≥–ª—É–±–æ–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
            certificateInfo: 'Standard WebRTC certificates'
        };
    }

    displayRealBrowserCapabilities(capabilities) {
        const resultsDiv = document.getElementById('fingerprintResults');
        const resultDiv = document.createElement('div');
        resultDiv.className = 'fingerprint-result';
        
        resultDiv.innerHTML = `
            <h4>üåê –†–ï–ê–õ–¨–ù–´–ï –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±—Ä–∞—É–∑–µ—Ä–∞</h4>
            <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 10px;">
                <div style="background: #f5f5f5; padding: 8px; border-radius: 4px;">
                    <strong>WebRTC –ø–æ–¥–¥–µ—Ä–∂–∫–∞:</strong><br>
                    PeerConnection: ${capabilities.webrtc.peerConnection ? '‚úÖ' : '‚ùå'}<br>
                    DataChannel: ${capabilities.webrtc.dataChannel ? '‚úÖ' : '‚ùå'}<br>
                    getUserMedia: ${capabilities.webrtc.getUserMedia ? '‚úÖ' : '‚ùå'}
                </div>
                <div style="background: #f5f5f5; padding: 8px; border-radius: 4px;">
                    <strong>–í–∏–¥–µ–æ –∫–æ–¥–µ–∫–∏:</strong><br>
                    ${capabilities.codecs.video.slice(0, 5).join(', ') || '–ù–µ –Ω–∞–π–¥–µ–Ω—ã'}
                </div>
                <div style="background: #f5f5f5; padding: 8px; border-radius: 4px;">
                    <strong>–ê—É–¥–∏–æ –∫–æ–¥–µ–∫–∏:</strong><br>
                    ${capabilities.codecs.audio.slice(0, 5).join(', ') || '–ù–µ –Ω–∞–π–¥–µ–Ω—ã'}
                </div>
                <div style="background: #f5f5f5; padding: 8px; border-radius: 4px;">
                    <strong>ICE Gathering:</strong><br>
                    –í—Ä–µ–º—è: ${capabilities.iceGathering.gatheringTime}ms<br>
                    –ö–∞–Ω–¥–∏–¥–∞—Ç–æ–≤: ${capabilities.iceGathering.candidateCount}<br>
                    –°–∫–æ—Ä–æ—Å—Ç—å: ${capabilities.iceGathering.speed.toFixed(2)}/—Å–µ–∫
                </div>
            </div>
            <div style="margin-top: 10px; background: #f5f5f5; padding: 8px; border-radius: 4px;">
                <strong>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±—Ä–∞—É–∑–µ—Ä–µ:</strong><br>
                Platform: ${capabilities.browserInfo.platform}<br>
                Language: ${capabilities.browserInfo.language}<br>
                Languages: ${capabilities.browserInfo.languages.join(', ')}<br>
                Online: ${capabilities.browserInfo.onLine ? '‚úÖ' : '‚ùå'}<br>
                Cookies: ${capabilities.browserInfo.cookieEnabled ? '‚úÖ' : '‚ùå'}<br>
                Do Not Track: ${capabilities.browserInfo.doNotTrack || 'Not set'}
            </div>
            <details style="margin-top: 10px;">
                <summary>User Agent</summary>
                <pre style="font-size: 10px; word-break: break-all;">${capabilities.browserInfo.userAgent}</pre>
            </details>
        `;
        
        resultsDiv.appendChild(resultDiv);
    }

    // –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π...
    async executeNetworkScan() {
        console.log('–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –†–ï–ê–õ–¨–ù–û–ì–û —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–µ—Ç–∏...');
        
        const command = {
            type: 'scan-all-interfaces',
            timestamp: Date.now(),
            scan: true
        };

        this.sendRealCommand(command);
        
        const networkInfo = await this.getRealNetworkInfo();
        this.displayRealNetworkInfo(networkInfo);
    }

    async getRealNetworkInfo() {
        console.log('–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ç–∏...');
        
        const networkData = {
            timestamp: Date.now(),
            connection: navigator.connection ? {
                effectiveType: navigator.connection.effectiveType,
                downlink: navigator.connection.downlink,
                rtt: navigator.connection.rtt,
                saveData: navigator.connection.saveData
            } : null,
            onlineStatus: navigator.onLine,
            webrtcIPs: await this.scanAllRealIPs(),
            platform: navigator.platform,
            userAgent: navigator.userAgent
        };

        console.log('–†–µ–∞–ª—å–Ω–∞—è —Å–µ—Ç–µ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:', networkData);
        return networkData;
    }

    async scanAllRealIPs() {
        return new Promise((resolve) => {
            const pc = new RTCPeerConnection({
                iceServers: [
                    {urls: 'stun:stun.l.google.com:19302'},
                    {urls: 'stun:stun1.l.google.com:19302'}
                ]
            });

            const ips = {
                local: [],
                public: [],
                mdns: []
            };

            pc.createDataChannel('scan');

            pc.onicecandidate = (event) => {
                if (event.candidate) {
                    const candidate = event.candidate.candidate;
                    console.log('–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ IP - –∫–∞–Ω–¥–∏–¥–∞—Ç:', candidate);

                    // mDNS –∞–¥—Ä–µ—Å–∞
                    const mdnsMatch = candidate.match(/([a-f0-9-]+\.local)/);
                    if (mdnsMatch) {
                        ips.mdns.push(mdnsMatch[1]);
                    }

                    // IP –∞–¥—Ä–µ—Å–∞
                    const ipMatches = candidate.match(/(\d+\.\d+\.\d+\.\d+)/g);
                    if (ipMatches) {
                        if (candidate.includes('typ host')) {
                            ips.local.push(...ipMatches);
                        } else if (candidate.includes('typ srflx')) {
                            ips.public.push(ipMatches[0]); // –ü–µ—Ä–≤—ã–π IP –≤ srflx - –ø—É–±–ª–∏—á–Ω—ã–π
                        }
                    }
                } else {
                    pc.close();
                    resolve({
                        localIPs: [...new Set(ips.local)],
                        publicIPs: [...new Set(ips.public)],
                        mdnsAddresses: [...new Set(ips.mdns)]
                    });
                }
            };

            pc.createOffer()
                .then(offer => pc.setLocalDescription(offer))
                .catch(() => resolve(ips));

            setTimeout(() => {
                pc.close();
                resolve({
                    localIPs: [...new Set(ips.local)],
                    publicIPs: [...new Set(ips.public)],
                    mdnsAddresses: [...new Set(ips.mdns)]
                });
            }, 8000);
        });
    }

    displayRealNetworkInfo(networkInfo) {
        const resultsDiv = document.getElementById('fingerprintResults');
        const resultDiv = document.createElement('div');
        resultDiv.className = 'fingerprint-result';
        
        resultDiv.innerHTML = `
            <h4>üåê –†–ï–ê–õ–¨–ù–ê–Ø –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ç–∏</h4>
            <div style="background: #f5f5f5; padding: 10px; border-radius: 4px;">
                <strong>–°—Ç–∞—Ç—É—Å:</strong> ${networkInfo.onlineStatus ? '–û–Ω–ª–∞–π–Ω' : '–û—Ñ—Ñ–ª–∞–π–Ω'}<br>
                ${networkInfo.connection ? `
                    <strong>–¢–∏–ø —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:</strong> ${networkInfo.connection.effectiveType}<br>
                    <strong>–°–∫–æ—Ä–æ—Å—Ç—å:</strong> ${networkInfo.connection.downlink} Mbps<br>
                    <strong>RTT:</strong> ${networkInfo.connection.rtt}ms<br>
                    <strong>–≠–∫–æ–Ω–æ–º–∏—è —Ç—Ä–∞—Ñ–∏–∫–∞:</strong> ${networkInfo.connection.saveData ? '–í–∫–ª—é—á–µ–Ω–∞' : '–í—ã–∫–ª—é—á–µ–Ω–∞'}<br>
                ` : ''}
                <strong>–õ–æ–∫–∞–ª—å–Ω—ã–µ IP:</strong> ${networkInfo.webrtcIPs.localIPs.join(', ') || '–ù–µ –Ω–∞–π–¥–µ–Ω—ã'}<br>
                <strong>–ü—É–±–ª–∏—á–Ω—ã–µ IP:</strong> ${networkInfo.webrtcIPs.publicIPs.join(', ') || '–ù–µ –Ω–∞–π–¥–µ–Ω—ã'}<br>
                <strong>mDNS –∞–¥—Ä–µ—Å–∞:</strong> ${networkInfo.webrtcIPs.mdnsAddresses.join(', ') || '–ù–µ –Ω–∞–π–¥–µ–Ω—ã'}<br>
                <strong>–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞:</strong> ${networkInfo.platform}<br>
                <details>
                    <summary>User Agent</summary>
                    <pre style="font-size: 10px; word-break: break-all;">${networkInfo.userAgent}</pre>
                </details>
            </div>
        `;
        
        resultsDiv.appendChild(resultDiv);
    }

    async executeHardwareFingerprint() {
        console.log('–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –†–ï–ê–õ–¨–ù–û–ì–û hardware fingerprinting...');
        
        const command = {
            type: 'hardware-fingerprint',
            timestamp: Date.now()
        };

        this.sendRealCommand(command);
        
        const hardwareInfo = this.getRealHardwareInfo();
        this.displayRealHardwareInfo(hardwareInfo);
    }

    getRealHardwareInfo() {
        const hardwareData = {
            timestamp: Date.now(),
            cpu: {
                cores: navigator.hardwareConcurrency,
                architecture: navigator.platform
            },
            memory: {
                deviceMemory: navigator.deviceMemory,
                jsHeapSize: performance.memory ? {
                    used: Math.round(performance.memory.usedJSHeapSize / 1024 / 1024),
                    total: Math.round(performance.memory.totalJSHeapSize / 1024 / 1024),
                    limit: Math.round(performance.memory.jsHeapSizeLimit / 1024 / 1024)
                } : null
            },
            screen: {
                width: screen.width,
                height: screen.height,
                colorDepth: screen.colorDepth,
                pixelDepth: screen.pixelDepth,
                pixelRatio: window.devicePixelRatio,
                orientation: screen.orientation ? screen.orientation.type : null
            },
            webgl: this.getRealWebGLInfo(),
            canvas: this.getRealCanvasFingerprint()
        };

        console.log('–†–µ–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∂–µ–ª–µ–∑–µ:', hardwareData);
        return hardwareData;
    }

    getRealWebGLInfo() {
        try {
            const canvas = document.createElement('canvas');
            const gl = canvas.getContext('webgl') || canvas.getContext('experimental-webgl');
            
            if (!gl) return null;

            return {
                vendor: gl.getParameter(gl.VENDOR),
                renderer: gl.getParameter(gl.RENDERER),
                version: gl.getParameter(gl.VERSION),
                shadingLanguageVersion: gl.getParameter(gl.SHADING_LANGUAGE_VERSION),
                extensions: gl.getSupportedExtensions()
            };
        } catch (e) {
            return null;
        }
    }

    getRealCanvasFingerprint() {
        try {
            const canvas = document.createElement('canvas');
            const ctx = canvas.getContext('2d');
            
            ctx.textBaseline = 'top';
            ctx.font = '14px Arial';
            ctx.fillStyle = '#f60';
            ctx.fillRect(125, 1, 62, 20);
            ctx.fillStyle = '#069';
            ctx.fillText('Canvas fingerprint üîç', 2, 15);
            ctx.fillStyle = 'rgba(102, 204, 0, 0.7)';
            ctx.fillText('Canvas fingerprint üîç', 4, 17);
            
            return {
                dataURL: canvas.toDataURL(),
                hash: this.hashString(canvas.toDataURL())
            };
        } catch (e) {
            return null;
        }
    }

    hashString(str) {
        let hash = 0;
        for (let i = 0; i < str.length; i++) {
            const char = str.charCodeAt(i);
            hash = ((hash << 5) - hash) + char;
            hash = hash & hash;
        }
        return hash.toString(16);
    }

    displayRealHardwareInfo(hardwareInfo) {
        const resultsDiv = document.getElementById('fingerprintResults');
        const resultDiv = document.createElement('div');
        resultDiv.className = 'fingerprint-result';
        
        resultDiv.innerHTML = `
            <h4>üñ•Ô∏è –†–ï–ê–õ–¨–ù–ê–Ø –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∂–µ–ª–µ–∑–µ</h4>
            <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 10px;">
                <div style="background: #f5f5f5; padding: 8px; border-radius: 4px;">
                    <strong>CPU:</strong><br>
                    Cores: ${hardwareInfo.cpu.cores || 'Unknown'}<br>
                    Platform: ${hardwareInfo.cpu.architecture}
                </div>
                <div style="background: #f5f5f5; padding: 8px; border-radius: 4px;">
                    <strong>Memory:</strong><br>
                    Device: ${hardwareInfo.memory.deviceMemory ? hardwareInfo.memory.deviceMemory + ' GB' : 'Unknown'}<br>
                    JS Heap: ${hardwareInfo.memory.jsHeapSize ? hardwareInfo.memory.jsHeapSize.used + ' MB' : 'Unknown'}
                </div>
                <div style="background: #f5f5f5; padding: 8px; border-radius: 4px;">
                    <strong>Screen:</strong><br>
                    Resolution: ${hardwareInfo.screen.width}x${hardwareInfo.screen.height}<br>
                    Color Depth: ${hardwareInfo.screen.colorDepth}<br>
                    Pixel Ratio: ${hardwareInfo.screen.pixelRatio}
                </div>
                <div style="background: #f5f5f5; padding: 8px; border-radius: 4px;">
                    <strong>WebGL:</strong><br>
                    ${hardwareInfo.webgl ? `
                        Vendor: ${hardwareInfo.webgl.vendor}<br>
                        Renderer: ${hardwareInfo.webgl.renderer}
                    ` : 'Not supported'}
                </div>
            </div>
            ${hardwareInfo.canvas ? `
                <div style="margin-top: 10px;">
                    <strong>Canvas Fingerprint:</strong> ${hardwareInfo.canvas.hash}<br>
                    <img src="${hardwareInfo.canvas.dataURL}" style="border: 1px solid #ccc;">
                </div>
            ` : ''}
            <details style="margin-top: 10px;">
                <summary>–ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ</summary>
                <pre style="font-size: 10px; background: #f9f9f9; padding: 10px; border-radius: 4px;">${JSON.stringify(hardwareInfo, null, 2)}</pre>
            </details>
        `;
        
        resultsDiv.appendChild(resultDiv);
    }

    // –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è —ç—Ç–∞–ø–æ–≤ 4 –∏ 5 (–ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã)
    async executeLocalNetworkScan() {
        alert('Local Network Scan - —Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ');
    }

    async executeVPNBypass() {
        alert('VPN Bypass - —Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ');
    }

    async executeBehaviorTracking() {
        alert('Behavior Tracking - —Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ');
    }

    async executeCrossBrowserTracking() {
        alert('Cross Browser Tracking - —Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ');
    }

    generateFullReport() {
        alert('Full Report - —Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ');
    }

    exportFingerprint() {
        alert('Export Fingerprint - —Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ');
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –†–ï–ê–õ–¨–ù–´–• –∫–æ–º–∞–Ω–¥
    sendRealCommand(command) {
        console.log('–û—Ç–ø—Ä–∞–≤–∫–∞ –†–ï–ê–õ–¨–ù–û–ô –∫–æ–º–∞–Ω–¥—ã:', command);
        
        if (this.dataChannel && this.dataChannel.readyState === 'open') {
            this.dataChannel.send(JSON.stringify(command));
            console.log('–ö–æ–º–∞–Ω–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —á–µ—Ä–µ–∑ DataChannel');
        } else {
            console.log('DataChannel –Ω–µ –≥–æ—Ç–æ–≤, –∫–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω–æ');
        }

        this.logCommand(command);
    }

    handleRealDataChannelMessage(data) {
        try {
            const message = JSON.parse(data);
            console.log('–ü–æ–ª—É—á–µ–Ω–æ —Ä–µ–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:', message);
            this.processRealCommand(message);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
        }
    }

    processRealCommand(command) {
        console.log('–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∞–ª—å–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã:', command);
        
        switch (command.type) {
            case 'create-stun-connection':
                this.executeRealSTUNRequests(command.config.iceServers)
                    .then(results => {
                        this.dataChannel.send(JSON.stringify({
                            type: 'stun-results',
                            originalCommand: command,
                            results: results,
                            timestamp: Date.now()
                        }));
                    });
                break;
                
            case 'hardware-fingerprint':
                const hardwareInfo = this.getRealHardwareInfo();
                this.dataChannel.send(JSON.stringify({
                    type: 'hardware-results',
                    originalCommand: command,
                    results: hardwareInfo,
                    timestamp: Date.now()
                }));
                break;
                
            default:
                console.log('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞:', command.type);
        }
    }

    logCommand(command) {
        const commandQueue = document.getElementById('commandQueue');
        const commandDiv = document.createElement('div');
        commandDiv.style.cssText = 'margin: 5px 0; padding: 8px; background: white; border-radius: 4px; border-left: 3px solid #2196F3;';
        commandDiv.innerHTML = `
            <strong>–†–ï–ê–õ–¨–ù–ê–Ø –∫–æ–º–∞–Ω–¥–∞: ${command.type}</strong><br>
            <small>–í—Ä–µ–º—è: ${new Date().toLocaleTimeString()}</small><br>
            <details>
                <summary>–î–µ—Ç–∞–ª–∏ –∫–æ–º–∞–Ω–¥—ã</summary>
                <pre style="font-size: 10px;">${JSON.stringify(command, null, 2)}</pre>
            </details>
        `;
        commandQueue.appendChild(commandDiv);
        commandQueue.scrollTop = commandQueue.scrollHeight;
    }

    clearCommandQueue() {
        document.getElementById('commandQueue').innerHTML = '';
    }

    // –£—Ç–∏–ª–∏—Ç—ã
    updateStatus(elementId, status, text) {
        const element = document.getElementById(elementId);
        element.className = `status ${status}`;
        element.textContent = text;
    }

    updateProgress(elementId, percent) {
        const element = document.getElementById(elementId);
        element.style.width = `${percent}%`;
    }

    completeMDNSDiscovery() {
        this.updateProgress('progress1', 100);
        
        if (this.mdnsAddresses.length === 0) {
            this.handleNoMDNSFound();
        } else {
            const resultsDiv = document.getElementById('mdnsResults');
            const summaryDiv = document.createElement('div');
            summaryDiv.className = 'fingerprint-result';
            summaryDiv.innerHTML = `
                <h4>‚úÖ –ù–∞–π–¥–µ–Ω–æ ${this.mdnsAddresses.length} –†–ï–ê–õ–¨–ù–´–• mDNS –∞–¥—Ä–µ—Å–∞</h4>
                <p>–ì–æ—Ç–æ–≤ –∫ —É—Å—Ç–∞–Ω–æ–≤–∫–µ P2P —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ —ç—Ç–∏ –∞–¥—Ä–µ—Å–∞</p>
            `;
            resultsDiv.appendChild(summaryDiv);
            
            document.getElementById('step1').classList.add('active');
            document.getElementById('p2pBtn').disabled = false;
        }
    }

    handleNoMDNSFound() {
        document.getElementById('step1').classList.add('error');
        const resultsDiv = document.getElementById('mdnsResults');
        resultsDiv.innerHTML = `
            <div class="attack-result">
                <h3>‚ö†Ô∏è mDNS –∞–¥—Ä–µ—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</h3>
                <p>mDNS –æ–±—Ñ—É—Å–∫–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞ –∏–ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ IP</p>
                <button onclick="realFingerprinter.findMDNSAddresses()">–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–∏—Å–∫</button>
            </div>
        `;
    }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
const realFingerprinter = new RealMDNSFingerprinter();

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫
function findMDNSAddresses() {
    realFingerprinter.findMDNSAddresses();
}

function establishP2PConnection() {
    realFingerprinter.establishP2PConnection();
}

function executeSTUNFingerprint() {
    realFingerprinter.executeSTUNFingerprint();
}

function executeNetworkScan() {
    realFingerprinter.executeNetworkScan();
}

function executeHardwareFingerprint() {
    realFingerprinter.executeHardwareFingerprint();
}

function executeBrowserCapabilities() {
    realFingerprinter.executeBrowserCapabilities();
}

function executeLocalNetworkScan() {
    realFingerprinter.executeLocalNetworkScan();
}

function executeVPNBypass() {
    realFingerprinter.executeVPNBypass();
}

function executeBehaviorTracking() {
    realFingerprinter.executeBehaviorTracking();
}

function executeCrossBrowserTracking() {
    realFingerprinter.executeCrossBrowserTracking();
}

function generateFullReport() {
    realFingerprinter.generateFullReport();
}

function exportFingerprint() {
    realFingerprinter.exportFingerprint();
}

function clearCommandQueue() {
    realFingerprinter.clearCommandQueue();
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
document.addEventListener('DOMContentLoaded', () => {
    console.log('–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô mDNS Fingerprinting System –∑–∞–≥—Ä—É–∂–µ–Ω');
    console.log('–í—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –ø–æ-–Ω–∞—Å—Ç–æ—è—â–µ–º—É, –±–µ–∑ —Å–∏–º—É–ª—è—Ü–∏–∏');
});
