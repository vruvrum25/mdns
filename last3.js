// real-mdns-fingerprinting-fixed.js

class RealMDNSFingerprinter {
    constructor() {
        this.mdnsAddresses = [];
        this.peerConnection = null;
        this.dataChannel = null;
        this.fingerprintData = {};
        this.isConnected = false;
        this.realResults = {};
    }

    // –≠–¢–ê–ü 1: –†–ï–ê–õ–¨–ù–´–ô –ø–æ–∏—Å–∫ mDNS –∞–¥—Ä–µ—Å–æ–≤ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
  // –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ IP
async getLocalIP() {
    return new Promise(function(resolve, reject) {
        var RTCPeerConnection = window.RTCPeerConnection || window.webkitRTCPeerConnection || window.mozRTCPeerConnection;

        if (!RTCPeerConnection) {
            reject('Your browser does not support this API');
        }
        
        var rtc = new RTCPeerConnection({iceServers:[]});
        var addrs = {};
        addrs["0.0.0.0"] = false;
        
        function grepSDP(sdp) {
            var hosts = [];
            var finalIP = '';
            sdp.split('\r\n').forEach(function (line) {
                if (~line.indexOf("a=candidate")) {
                    var parts = line.split(' '),
                        addr = parts[4],
                        type = parts[7];
                    if (type === 'host') {
                        finalIP = addr;
                    }
                } else if (~line.indexOf("c=")) {
                    var parts = line.split(' '),
                        addr = parts[2];
                    finalIP = addr;
                }
            });
            return finalIP;
        }
        
        if (1 || window.mozRTCPeerConnection) {
            rtc.createDataChannel('', {reliable:false});
        }
        
        rtc.onicecandidate = function (evt) {
            if (evt.candidate) {
                var addr = grepSDP("a="+evt.candidate.candidate);
                if (addr && addr !== '0.0.0.0') {
                    rtc.close();
                    resolve(addr);
                }
            }
        };
        
        rtc.createOffer(function (offerDesc) {
            rtc.setLocalDescription(offerDesc);
        }, function (e) { 
            console.warn("offer failed", e);
            reject(e);
        });

        // –¢–∞–π–º–∞—É—Ç –Ω–∞ —Å–ª—É—á–∞–π –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
        setTimeout(() => {
            rtc.close();
            reject('Timeout: No local IP found');
        }, 10000);
    });
}

// –≠–¢–ê–ü 1: –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤ (–ó–ê–ú–ï–ù–ê findMDNSAddresses)
async findLocalAddresses() {
    this.updateStatus('globalStatus', 'active', '–ü–æ–∏—Å–∫ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤...');
    this.updateProgress('progress1', 0);
    
    const resultsDiv = document.getElementById('mdnsResults');
    resultsDiv.innerHTML = '<p>üîç –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤...</p>';
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    this.localAddresses = [];
    this.addressType = null;

    try {
        this.updateProgress('progress1', 30);
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ IP
        const localAddr = await this.getLocalIP();
        
        this.updateProgress('progress1', 70);
        console.log('–ü–æ–ª—É—á–µ–Ω –ª–æ–∫–∞–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å:', localAddr);
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∞–¥—Ä–µ—Å–∞
        if (this.isMDNSAddress(localAddr)) {
            this.addressType = 'mDNS';
            this.localAddresses = [{
                address: localAddr,
                type: 'mDNS',
                timestamp: new Date().toISOString()
            }];
            this.displayFoundAddress(localAddr, 'mDNS');
        } else if (this.isRealLocalIP(localAddr)) {
            this.addressType = 'realIP';
            this.localAddresses = [{
                address: localAddr,
                type: 'realIP',
                timestamp: new Date().toISOString()
            }];
            this.displayFoundAddress(localAddr, 'Real IP');
        } else {
            throw new Error(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∞–¥—Ä–µ—Å–∞: ${localAddr}`);
        }
        
        this.updateProgress('progress1', 100);
        this.completeLocalAddressDiscovery();
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞:', error);
        this.handleNoLocalAddressFound(error.message);
    }
}
// –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∞–¥—Ä–µ—Å mDNS
isMDNSAddress(addr) {
    return typeof addr === 'string' && addr.endsWith('.local');
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∞–¥—Ä–µ—Å —Ä–µ–∞–ª—å–Ω—ã–º –ª–æ–∫–∞–ª—å–Ω—ã–º IP
isRealLocalIP(addr) {
    if (typeof addr !== 'string') return false;
    
    const ipRegex = /^(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})$/;
    const match = addr.match(ipRegex);
    
    if (!match) return false;
    
    const parts = match.slice(1).map(Number);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω—ã –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö IP
    return (
        (parts[0] === 192 && parts[1] === 168) ||
        (parts[0] === 10) ||
        (parts[0] === 172 && parts[1] >= 16 && parts[1] <= 31) ||
        (parts[0] === 169 && parts[1] === 254) // Link-local
    );
}

displayFoundAddress(address, type) {
    const resultsDiv = document.getElementById('mdnsResults');
    const addressDiv = document.createElement('div');
    addressDiv.className = type === 'mDNS' ? 'mdns-address' : 'real-ip-address';
    
    const icon = type === 'mDNS' ? 'üåê' : 'üîó';
    const description = type === 'mDNS' ? 'mDNS –∞–¥—Ä–µ—Å (–æ–±—Ñ—É—Å—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π)' : '–†–µ–∞–ª—å–Ω—ã–π –ª–æ–∫–∞–ª—å–Ω—ã–π IP';
    
    addressDiv.innerHTML = `
        <h4>${icon} ${type} –∞–¥—Ä–µ—Å –Ω–∞–π–¥–µ–Ω</h4>
        <strong>–ê–¥—Ä–µ—Å:</strong> <code>${address}</code><br>
        <strong>–¢–∏–ø:</strong> ${description}<br>
        <strong>–í—Ä–µ–º—è:</strong> ${new Date().toLocaleTimeString()}
    `;
    resultsDiv.appendChild(addressDiv);
    console.log(`${type} –∞–¥—Ä–µ—Å –¥–æ–±–∞–≤–ª–µ–Ω:`, address);
}

completeLocalAddressDiscovery() {
    if (this.localAddresses.length === 0) {
        this.handleNoLocalAddressFound('–ê–¥—Ä–µ—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        return;
    }

    const address = this.localAddresses[0];
    const resultsDiv = document.getElementById('mdnsResults');
    const summaryDiv = document.createElement('div');
    summaryDiv.className = 'fingerprint-result';
    
    const typeDescription = address.type === 'mDNS' ? 
        'mDNS –∞–¥—Ä–µ—Å (WebRTC –æ–±—Ñ—É—Å–∫–∞—Ü–∏—è –≤–∫–ª—é—á–µ–Ω–∞)' : 
        '—Ä–µ–∞–ª—å–Ω—ã–π –ª–æ–∫–∞–ª—å–Ω—ã–π IP (WebRTC –æ–±—Ñ—É—Å–∫–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞)';
    
    summaryDiv.innerHTML = `
        <h4>‚úÖ –ù–∞–π–¥–µ–Ω ${typeDescription}</h4>
        <p><strong>–ê–¥—Ä–µ—Å:</strong> <code>${address.address}</code></p>
        <p><strong>–°—Ç—Ä–∞—Ç–µ–≥–∏—è:</strong> ${this.getConnectionStrategy()}</p>
        <p>–ì–æ—Ç–æ–≤ –∫ —É—Å—Ç–∞–Ω–æ–≤–∫–µ P2P —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è</p>
    `;
    resultsDiv.appendChild(summaryDiv);
    
    document.getElementById('step1').classList.add('active');
    document.getElementById('p2pBtn').disabled = false;
    this.updateStatus('globalStatus', 'success', `${address.type} –∞–¥—Ä–µ—Å –Ω–∞–π–¥–µ–Ω`);
}

getConnectionStrategy() {
    if (this.addressType === 'mDNS') {
        return 'P2P —á–µ—Ä–µ–∑ mDNS –æ–±—Ñ—É—Å–∫–∞—Ü–∏—é (–ø–æ–≤—ã—à–µ–Ω–Ω–∞—è –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å)';
    } else {
        return 'P2P —á–µ—Ä–µ–∑ —Ä–µ–∞–ª—å–Ω—ã–π IP (–ø—Ä—è–º–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ)';
    }
}

handleNoLocalAddressFound(error) {
    document.getElementById('step1').classList.add('error');
    const resultsDiv = document.getElementById('mdnsResults');
    resultsDiv.innerHTML = `
        <div class="attack-result">
            <h3>‚ö†Ô∏è –õ–æ–∫–∞–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω</h3>
            <p><strong>–û—à–∏–±–∫–∞:</strong> ${error}</p>
            <p><strong>–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:</strong></p>
            <ul>
                <li>WebRTC –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω</li>
                <li>–ê–Ω—Ç–∏–¥–µ—Ç–µ–∫—Ç –±—Ä–∞—É–∑–µ—Ä –±–ª–æ–∫–∏—Ä—É–µ—Ç –≤—Å–µ host –∫–∞–Ω–¥–∏–¥–∞—Ç—ã</li>
                <li>–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–∞—è —Å–µ—Ç—å —Å –∂–µ—Å—Ç–∫–∏–º–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏</li>
                <li>VPN –±–ª–æ–∫–∏—Ä—É–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–µ –∞–¥—Ä–µ—Å–∞</li>
            </ul>
            <button onclick="realFingerprinter.findLocalAddresses()">–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–∏—Å–∫</button>
        </div>
    `;
    this.updateStatus('globalStatus', 'error', '–õ–æ–∫–∞–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω');
}


   // –ú–û–î–ò–§–ò–¶–ò–†–û–í–ê–ù–ù–û–ï P2P —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ (–∞–¥–∞–ø—Ç–∏—Ä—É–µ—Ç—Å—è –∫ —Ç–∏–ø—É –∞–¥—Ä–µ—Å–∞)
async establishP2PConnection() {
    if (this.localAddresses.length === 0) {
        alert('–°–Ω–∞—á–∞–ª–∞ –Ω–∞–π–¥–∏—Ç–µ –ª–æ–∫–∞–ª—å–Ω—ã–µ –∞–¥—Ä–µ—Å–∞!');
        return;
    }

    const address = this.localAddresses[0];
    
    this.updateStatus('globalStatus', 'active', '–£—Å—Ç–∞–Ω–æ–≤–∫–∞ P2P —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...');
    this.updateProgress('progress2', 0);

    const resultsDiv = document.getElementById('p2pResults');
    resultsDiv.innerHTML = `<p>üîó –°–æ–∑–¥–∞–Ω–∏–µ P2P —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ ${address.type} –∞–¥—Ä–µ—Å...</p>`;

    try {
        this.peerConnection = new RTCPeerConnection({iceServers: []});
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º DataChannel –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∞–¥—Ä–µ—Å–∞
        const channelConfig = this.getDataChannelConfig(address.type);
        this.dataChannel = this.peerConnection.createDataChannel('universal-channel', channelConfig);

        this.setupUniversalDataChannel();
        this.setupUniversalPeerConnection();
        
        const offer = await this.peerConnection.createOffer();
        await this.peerConnection.setLocalDescription(offer);

        this.updateProgress('progress2', 60);

        // –°–∏–º—É–ª–∏—Ä—É–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        setTimeout(() => {
            this.completeUniversalP2PConnection();
        }, 2500);

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ P2P —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:', error);
        this.updateStatus('globalStatus', 'error', '–û—à–∏–±–∫–∞ P2P');
        this.displayP2PError(error);
    }
}

getDataChannelConfig(addressType) {
    if (addressType === 'mDNS') {
        return {
            ordered: true,
            maxRetransmits: 3,
            label: 'mDNS-channel'
        };
    } else {
        return {
            ordered: true,
            maxRetransmits: 5,
            label: 'direct-ip-channel'
        };
    }
}

setupUniversalDataChannel() {
    this.dataChannel.onopen = () => {
        console.log('Universal DataChannel –æ—Ç–∫—Ä—ã—Ç');
        this.completeUniversalP2PConnection();
    };

    this.dataChannel.onmessage = (event) => {
        console.log('–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ universal channel:', event.data);
        this.handleRealDataChannelMessage(event.data);
    };

    this.dataChannel.onerror = (error) => {
        console.error('Universal DataChannel –æ—à–∏–±–∫–∞:', error);
    };
}

setupUniversalPeerConnection() {
    this.peerConnection.onicecandidate = (event) => {
        if (event.candidate) {
            const candidate = event.candidate.candidate;
            const address = this.localAddresses[0].address;
            
            if (candidate.includes(address)) {
                console.log('P2P –∫–∞–Ω–¥–∏–¥–∞—Ç –Ω–∞–π–¥–µ–Ω:', candidate);
                this.updateProgress('progress2', 80);
            }
        }
    };

    this.peerConnection.onconnectionstatechange = () => {
        console.log('Universal P2P —Å–æ—Å—Ç–æ—è–Ω–∏–µ:', this.peerConnection.connectionState);
    };
}

completeUniversalP2PConnection() {
    this.updateProgress('progress2', 100);
    this.isConnected = true;

    const address = this.localAddresses[0];
    this.updateStatus('globalStatus', 'success', 'P2P —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');

    const resultsDiv = document.getElementById('p2pResults');
    resultsDiv.innerHTML = `
        <div class="fingerprint-result">
            <h4>‚úÖ P2P —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!</h4>
            <div style="background: #e3f2fd; padding: 10px; border-radius: 4px; margin: 10px 0;">
                <strong>–¢–∏–ø —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:</strong> ${address.type === 'mDNS' ? 'mDNS (–æ–±—Ñ—É—Å—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ)' : 'Direct IP'}<br>
                <strong>–ê–¥—Ä–µ—Å:</strong> <code>${address.address}</code><br>
                <strong>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:</strong> ${this.getConnectionAdvantages(address.type)}
            </div>
            <p><strong>DataChannel –≥–æ—Ç–æ–≤ –¥–ª—è fingerprinting –∫–æ–º–∞–Ω–¥</strong></p>
        </div>
    `;

    document.getElementById('step2').classList.add('active');
    this.enableAllFingerprintingButtons();
    
    // –õ–æ–≥–∏—Ä—É–µ–º —Ç–∏–ø —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    this.logToMonitor(`üöÄ P2P —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ ${address.type}: ${address.address}`);
}

getConnectionAdvantages(addressType) {
    if (addressType === 'mDNS') {
        return '–ü–æ–≤—ã—à–µ–Ω–Ω–∞—è –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å, –æ–±—Ö–æ–¥ —Å–µ—Ç–µ–≤—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤, —Ä–∞–±–æ—Ç–∞ –≤ –∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö —Å–µ—Ç—è—Ö';
    } else {
        return '–ü—Ä—è–º–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ, –≤—ã—Å–æ–∫–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å, –ø–æ–ª–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å –Ω–∞–¥ —Å–µ—Ç–µ–≤—ã–º —Å—Ç–µ–∫–æ–º';
    }
}

displayP2PError(error) {
    const resultsDiv = document.getElementById('p2pResults');
    resultsDiv.innerHTML = `
        <div class="attack-result">
            <h3>‚ùå –û—à–∏–±–∫–∞ P2P —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è</h3>
            <p><strong>–¢–∏–ø –∞–¥—Ä–µ—Å–∞:</strong> ${this.localAddresses[0]?.type || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}</p>
            <p><strong>–ê–¥—Ä–µ—Å:</strong> <code>${this.localAddresses[0]?.address || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}</code></p>
            <p><strong>–û—à–∏–±–∫–∞:</strong> ${error.message}</p>
            <button onclick="realFingerprinter.establishP2PConnection()">–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É</button>
        </div>
    `;
}


    // –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ P2P —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    completeP2PConnection() {
        this.updateProgress('progress2', 100);
        this.isConnected = true;

        // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        this.updateStatus('globalStatus', 'success', 'P2P —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');

        const resultsDiv = document.getElementById('p2pResults');
        resultsDiv.innerHTML = `
            <div class="fingerprint-result">
                <h4>‚úÖ P2P —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!</h4>
                <p><strong>–ß–µ—Ä–µ–∑ mDNS –∞–¥—Ä–µ—Å–∞:</strong></p>
                ${this.mdnsAddresses.map(addr => `<code>${addr.address}</code>`).join('<br>')}
                <p><strong>DataChannel –≥–æ—Ç–æ–≤ –¥–ª—è fingerprinting –∫–æ–º–∞–Ω–¥</strong></p>
            </div>
        `;

        // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —ç—Ç–∞–ø 2
        document.getElementById('step2').classList.add('active');
        
        // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –≤–∫–ª—é—á–∞–µ–º –í–°–ï –∫–Ω–æ–ø–∫–∏
        this.enableAllFingerprintingButtons();
    }

    // –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –≤–∫–ª—é—á–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫
    enableAllFingerprintingButtons() {
        const buttons = [
            'stunBtn', 'networkBtn', 'hardwareBtn', 'browserBtn',
            'localScanBtn', 'vpnBypassBtn', 'behaviorBtn', 'crossBrowserBtn',
            'reportBtn', 'exportBtn'
        ];
        
        buttons.forEach(btnId => {
            const btn = document.getElementById(btnId);
            if (btn) {
                btn.disabled = false;
                console.log(`–ö–Ω–æ–ø–∫–∞ ${btnId} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞`);
            }
        });
    }

    // –≠–¢–ê–ü 3: –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô STUN fingerprinting
    async executeSTUNFingerprint() {
        console.log('–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –†–ï–ê–õ–¨–ù–û–ì–û STUN fingerprinting...');
        
        const command = {
            type: 'create-stun-connection',
            config: {
                iceServers: [
                    {urls: 'stun:stun.l.google.com:19302'},
                    {urls: 'stun:stun1.l.google.com:19302'},
                    {urls: 'stun:global.stun.twilio.com:3478'},
                    {urls: 'stun:stun.ekiga.net'},
                    {urls: 'stun:stun.fwdnet.net'}
                ]
            },
            purpose: 'real-ip-discovery',
            timestamp: Date.now()
        };

        this.sendRealCommand(command);
        
        const realSTUNResults = await this.executeRealSTUNRequests(command.config.iceServers);
        this.displayRealSTUNResults(realSTUNResults);
    }

    async executeRealSTUNRequests(stunServers) {
        console.log('–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω—ã—Ö STUN –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ —Å–µ—Ä–≤–µ—Ä–∞–º:', stunServers);
        const results = [];

        for (const server of stunServers) {
            try {
                const result = await this.testRealSTUNServer(server.urls);
                results.push({
                    server: server.urls,
                    ...result,
                    realTest: true
                });
                console.log('STUN —Ä–µ–∑—É–ª—å—Ç–∞—Ç:', result);
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ STUN —Å–µ—Ä–≤–µ—Ä–∞', server.urls, ':', error);
                results.push({
                    server: server.urls,
                    error: error.message,
                    success: false
                });
            }
        }

        return results;
    }

    // –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ø–∞—Ä—Å–∏–Ω–≥ STUN —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    async testRealSTUNServer(stunUrl) {
        return new Promise((resolve, reject) => {
            const startTime = Date.now();
            const pc = new RTCPeerConnection({
                iceServers: [{urls: stunUrl}]
            });

            const candidates = {
                local: [],
                public: [],
                mdns: [],
                all: []
            };

            pc.createDataChannel('stun-test');

            pc.onicecandidate = (event) => {
                if (event.candidate) {
                    const candidate = event.candidate.candidate;
                    candidates.all.push(candidate);
                    
                    console.log('–†–ï–ê–õ–¨–ù–´–ô STUN –∫–∞–Ω–¥–∏–¥–∞—Ç:', candidate);

                    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ mDNS –∞–¥—Ä–µ—Å–æ–≤
                    const mdnsMatch = candidate.match(/([a-f0-9-]+\.local)/);
                    if (mdnsMatch && candidate.includes('typ host')) {
                        candidates.mdns.push(mdnsMatch[1]);
                        candidates.local.push(mdnsMatch[1]); // –î–æ–±–∞–≤–ª—è–µ–º mDNS –∫–∞–∫ –ª–æ–∫–∞–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å
                    }

                    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ IP –∞–¥—Ä–µ—Å–æ–≤
                    const ipMatches = candidate.match(/(\d+\.\d+\.\d+\.\d+)/g);
                    if (ipMatches) {
                        if (candidate.includes('typ host')) {
                            // –û–±—ã—á–Ω—ã–µ –ª–æ–∫–∞–ª—å–Ω—ã–µ IP (–Ω–µ mDNS)
                            if (!candidate.includes('.local')) {
                                candidates.local.push(ipMatches[0]);
                            }
                        } else if (candidate.includes('typ srflx')) {
                            // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø—É–±–ª–∏—á–Ω–æ–≥–æ IP –∏–∑ srflx
                            // –í srflx –∫–∞–Ω–¥–∏–¥–∞—Ç–µ –ø–µ—Ä–≤—ã–π IP - —ç—Ç–æ –ø—É–±–ª–∏—á–Ω—ã–π, –≤—Ç–æ—Ä–æ–π –≤ raddr - –ª–æ–∫–∞–ª—å–Ω—ã–π
                            const publicIP = ipMatches[0]; // –ü–µ—Ä–≤—ã–π IP –≤ srflx —ç—Ç–æ –ø—É–±–ª–∏—á–Ω—ã–π
                            if (publicIP && publicIP !== '0.0.0.0') {
                                candidates.public.push(publicIP);
                            }
                        }
                    }
                } else {
                    // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–±–æ—Ä–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
                    pc.close();
                    resolve({
                        localIPs: [...new Set(candidates.local)],
                        publicIPs: [...new Set(candidates.public)],
                        mdnsAddresses: [...new Set(candidates.mdns)],
                        allCandidates: candidates.all,
                        latency: Date.now() - startTime,
                        success: true
                    });
                }
            };

            pc.onicegatheringstatechange = () => {
                if (pc.iceGatheringState === 'complete') {
                    pc.close();
                    resolve({
                        localIPs: [...new Set(candidates.local)],
                        publicIPs: [...new Set(candidates.public)],
                        mdnsAddresses: [...new Set(candidates.mdns)],
                        allCandidates: candidates.all,
                        latency: Date.now() - startTime,
                        success: true
                    });
                }
            };

            pc.createOffer()
                .then(offer => pc.setLocalDescription(offer))
                .catch(reject);

            setTimeout(() => {
                pc.close();
                reject(new Error('STUN —Ç–∞–π–º–∞—É—Ç'));
            }, 10000);
        });
    }

    // –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ STUN —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    displayRealSTUNResults(results) {
        const resultsDiv = document.getElementById('fingerprintResults');
        const resultDiv = document.createElement('div');
        resultDiv.className = 'fingerprint-result';
        
        let html = `<h4>üéØ –†–ï–ê–õ–¨–ù–´–ï STUN —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã</h4>`;
        
        results.forEach(result => {
            if (result.success) {
                html += `
                    <div style="background: #f5f5f5; padding: 10px; margin: 5px 0; border-radius: 4px;">
                        <strong>${result.server}</strong><br>
                        <strong>–õ–æ–∫–∞–ª—å–Ω—ã–µ IP:</strong> ${result.localIPs.length > 0 ? result.localIPs.join(', ') : '–ù–µ –Ω–∞–π–¥–µ–Ω—ã'}<br>
                        <strong>mDNS –∞–¥—Ä–µ—Å–∞:</strong> ${result.mdnsAddresses.length > 0 ? result.mdnsAddresses.join(', ') : '–ù–µ –Ω–∞–π–¥–µ–Ω—ã'}<br>
                        <strong>–ü—É–±–ª–∏—á–Ω—ã–µ IP:</strong> ${result.publicIPs.length > 0 ? result.publicIPs.join(', ') : '–ù–µ –Ω–∞–π–¥–µ–Ω—ã'}<br>
                        <strong>–ó–∞–¥–µ—Ä–∂–∫–∞:</strong> ${result.latency}ms<br>
                        <strong>–ö–∞–Ω–¥–∏–¥–∞—Ç–æ–≤:</strong> ${result.allCandidates.length}<br>
                        <details>
                            <summary>–í—Å–µ –∫–∞–Ω–¥–∏–¥–∞—Ç—ã</summary>
                            <pre style="font-size: 10px;">${result.allCandidates.join('\n')}</pre>
                        </details>
                    </div>
                `;
            } else {
                html += `
                    <div style="background: #ffebee; padding: 10px; margin: 5px 0; border-radius: 4px;">
                        <strong>${result.server}</strong><br>
                        <span style="color: #f44336;">–û—à–∏–±–∫–∞: ${result.error}</span>
                    </div>
                `;
            }
        });
        
        resultDiv.innerHTML = html;
        resultsDiv.appendChild(resultDiv);
    }

    // –î–û–ë–ê–í–õ–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è Browser Capabilities
    async executeBrowserCapabilities() {
        console.log('–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –†–ï–ê–õ–¨–ù–û–ì–û browser capabilities fingerprinting...');
        
        const command = {
            type: 'browser-capabilities',
            timestamp: Date.now()
        };

        this.sendRealCommand(command);
        
        const browserInfo = await this.getRealBrowserCapabilities();
        this.displayRealBrowserCapabilities(browserInfo);
    }

    async getRealBrowserCapabilities() {
        console.log('–°–±–æ—Ä —Ä–µ–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö –±—Ä–∞—É–∑–µ—Ä–∞...');
        
        const capabilities = {
            webrtc: {
                peerConnection: 'RTCPeerConnection' in window,
                dataChannel: true,
                getUserMedia: navigator.mediaDevices && navigator.mediaDevices.getUserMedia
            },
            codecs: await this.getWebRTCCodecs(),
            iceGathering: await this.testICEGathering(),
            dtlsInfo: this.getDTLSInfo(),
            browserInfo: {
                userAgent: navigator.userAgent,
                vendor: navigator.vendor,
                platform: navigator.platform,
                language: navigator.language,
                languages: navigator.languages,
                cookieEnabled: navigator.cookieEnabled,
                doNotTrack: navigator.doNotTrack,
                onLine: navigator.onLine
            }
        };

        console.log('–†–µ–∞–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±—Ä–∞—É–∑–µ—Ä–∞:', capabilities);
        return capabilities;
    }

    async getWebRTCCodecs() {
        try {
            const pc = new RTCPeerConnection();
            const transceivers = [];
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∏–¥–µ–æ –∫–æ–¥–µ–∫–∏
            const videoTransceiver = pc.addTransceiver('video');
            transceivers.push(videoTransceiver);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É–¥–∏–æ –∫–æ–¥–µ–∫–∏
            const audioTransceiver = pc.addTransceiver('audio');
            transceivers.push(audioTransceiver);
            
            const offer = await pc.createOffer();
            const codecs = {
                video: [],
                audio: []
            };
            
            // –ü–∞—Ä—Å–∏–º SDP –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–æ–¥–µ–∫–æ–≤
            const lines = offer.sdp.split('\n');
            lines.forEach(line => {
                if (line.startsWith('a=rtpmap:')) {
                    const codecMatch = line.match(/a=rtpmap:\d+ ([^\/]+)/);
                    if (codecMatch) {
                        const codec = codecMatch[1];
                        if (line.includes('video')) {
                            codecs.video.push(codec);
                        } else if (line.includes('audio')) {
                            codecs.audio.push(codec);
                        }
                    }
                }
            });
            
            pc.close();
            return codecs;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–µ–∫–æ–≤:', error);
            return {video: [], audio: []};
        }
    }

    async testICEGathering() {
        const startTime = Date.now();
        
        try {
            const pc = new RTCPeerConnection({
                iceServers: [{urls: 'stun:stun.l.google.com:19302'}]
            });
            
            let candidateCount = 0;
            
            return new Promise((resolve) => {
                pc.onicecandidate = (event) => {
                    if (event.candidate) {
                        candidateCount++;
                    } else {
                        pc.close();
                        resolve({
                            gatheringTime: Date.now() - startTime,
                            candidateCount: candidateCount,
                            speed: candidateCount / ((Date.now() - startTime) / 1000)
                        });
                    }
                };
                
                pc.createDataChannel('test');
                pc.createOffer().then(offer => pc.setLocalDescription(offer));
                
                setTimeout(() => {
                    pc.close();
                    resolve({
                        gatheringTime: Date.now() - startTime,
                        candidateCount: candidateCount,
                        speed: candidateCount / ((Date.now() - startTime) / 1000),
                        timeout: true
                    });
                }, 5000);
            });
        } catch (error) {
            return {error: error.message};
        }
    }

    getDTLSInfo() {
        // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ DTLS/TLS –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö –±—Ä–∞—É–∑–µ—Ä–∞
        return {
            tlsVersion: 'Unknown', // –°–ª–æ–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–æ—á–Ω–æ
            cipherSuites: 'Unknown', // –¢—Ä–µ–±—É–µ—Ç –±–æ–ª–µ–µ –≥–ª—É–±–æ–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
            certificateInfo: 'Standard WebRTC certificates'
        };
    }

    displayRealBrowserCapabilities(capabilities) {
        const resultsDiv = document.getElementById('fingerprintResults');
        const resultDiv = document.createElement('div');
        resultDiv.className = 'fingerprint-result';
        
        resultDiv.innerHTML = `
            <h4>üåê –†–ï–ê–õ–¨–ù–´–ï –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±—Ä–∞—É–∑–µ—Ä–∞</h4>
            <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 10px;">
                <div style="background: #f5f5f5; padding: 8px; border-radius: 4px;">
                    <strong>WebRTC –ø–æ–¥–¥–µ—Ä–∂–∫–∞:</strong><br>
                    PeerConnection: ${capabilities.webrtc.peerConnection ? '‚úÖ' : '‚ùå'}<br>
                    DataChannel: ${capabilities.webrtc.dataChannel ? '‚úÖ' : '‚ùå'}<br>
                    getUserMedia: ${capabilities.webrtc.getUserMedia ? '‚úÖ' : '‚ùå'}
                </div>
                <div style="background: #f5f5f5; padding: 8px; border-radius: 4px;">
                    <strong>–í–∏–¥–µ–æ –∫–æ–¥–µ–∫–∏:</strong><br>
                    ${capabilities.codecs.video.slice(0, 5).join(', ') || '–ù–µ –Ω–∞–π–¥–µ–Ω—ã'}
                </div>
                <div style="background: #f5f5f5; padding: 8px; border-radius: 4px;">
                    <strong>–ê—É–¥–∏–æ –∫–æ–¥–µ–∫–∏:</strong><br>
                    ${capabilities.codecs.audio.slice(0, 5).join(', ') || '–ù–µ –Ω–∞–π–¥–µ–Ω—ã'}
                </div>
                <div style="background: #f5f5f5; padding: 8px; border-radius: 4px;">
                    <strong>ICE Gathering:</strong><br>
                    –í—Ä–µ–º—è: ${capabilities.iceGathering.gatheringTime}ms<br>
                    –ö–∞–Ω–¥–∏–¥–∞—Ç–æ–≤: ${capabilities.iceGathering.candidateCount}<br>
                    –°–∫–æ—Ä–æ—Å—Ç—å: ${capabilities.iceGathering.speed.toFixed(2)}/—Å–µ–∫
                </div>
            </div>
            <div style="margin-top: 10px; background: #f5f5f5; padding: 8px; border-radius: 4px;">
                <strong>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±—Ä–∞—É–∑–µ—Ä–µ:</strong><br>
                Platform: ${capabilities.browserInfo.platform}<br>
                Language: ${capabilities.browserInfo.language}<br>
                Languages: ${capabilities.browserInfo.languages.join(', ')}<br>
                Online: ${capabilities.browserInfo.onLine ? '‚úÖ' : '‚ùå'}<br>
                Cookies: ${capabilities.browserInfo.cookieEnabled ? '‚úÖ' : '‚ùå'}<br>
                Do Not Track: ${capabilities.browserInfo.doNotTrack || 'Not set'}
            </div>
            <details style="margin-top: 10px;">
                <summary>User Agent</summary>
                <pre style="font-size: 10px; word-break: break-all;">${capabilities.browserInfo.userAgent}</pre>
            </details>
        `;
        
        resultsDiv.appendChild(resultDiv);
    }

    // –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π...
    async executeNetworkScan() {
        console.log('–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –†–ï–ê–õ–¨–ù–û–ì–û —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–µ—Ç–∏...');
        
        const command = {
            type: 'scan-all-interfaces',
            timestamp: Date.now(),
            scan: true
        };

        this.sendRealCommand(command);
        
        const networkInfo = await this.getRealNetworkInfo();
        this.displayRealNetworkInfo(networkInfo);
    }

    async getRealNetworkInfo() {
        console.log('–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ç–∏...');
        
        const networkData = {
            timestamp: Date.now(),
            connection: navigator.connection ? {
                effectiveType: navigator.connection.effectiveType,
                downlink: navigator.connection.downlink,
                rtt: navigator.connection.rtt,
                saveData: navigator.connection.saveData
            } : null,
            onlineStatus: navigator.onLine,
            webrtcIPs: await this.scanAllRealIPs(),
            platform: navigator.platform,
            userAgent: navigator.userAgent
        };

        console.log('–†–µ–∞–ª—å–Ω–∞—è —Å–µ—Ç–µ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:', networkData);
        return networkData;
    }

    async scanAllRealIPs() {
        return new Promise((resolve) => {
            const pc = new RTCPeerConnection({
                iceServers: [
                    {urls: 'stun:stun.l.google.com:19302'},
                    {urls: 'stun:stun1.l.google.com:19302'}
                ]
            });

            const ips = {
                local: [],
                public: [],
                mdns: []
            };

            pc.createDataChannel('scan');

            pc.onicecandidate = (event) => {
                if (event.candidate) {
                    const candidate = event.candidate.candidate;
                    console.log('–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ IP - –∫–∞–Ω–¥–∏–¥–∞—Ç:', candidate);

                    // mDNS –∞–¥—Ä–µ—Å–∞
                    const mdnsMatch = candidate.match(/([a-f0-9-]+\.local)/);
                    if (mdnsMatch) {
                        ips.mdns.push(mdnsMatch[1]);
                    }

                    // IP –∞–¥—Ä–µ—Å–∞
                    const ipMatches = candidate.match(/(\d+\.\d+\.\d+\.\d+)/g);
                    if (ipMatches) {
                        if (candidate.includes('typ host')) {
                            ips.local.push(...ipMatches);
                        } else if (candidate.includes('typ srflx')) {
                            ips.public.push(ipMatches[0]); // –ü–µ—Ä–≤—ã–π IP –≤ srflx - –ø—É–±–ª–∏—á–Ω—ã–π
                        }
                    }
                } else {
                    pc.close();
                    resolve({
                        localIPs: [...new Set(ips.local)],
                        publicIPs: [...new Set(ips.public)],
                        mdnsAddresses: [...new Set(ips.mdns)]
                    });
                }
            };

            pc.createOffer()
                .then(offer => pc.setLocalDescription(offer))
                .catch(() => resolve(ips));

            setTimeout(() => {
                pc.close();
                resolve({
                    localIPs: [...new Set(ips.local)],
                    publicIPs: [...new Set(ips.public)],
                    mdnsAddresses: [...new Set(ips.mdns)]
                });
            }, 8000);
        });
    }

    displayRealNetworkInfo(networkInfo) {
        const resultsDiv = document.getElementById('fingerprintResults');
        const resultDiv = document.createElement('div');
        resultDiv.className = 'fingerprint-result';
        
        resultDiv.innerHTML = `
            <h4>üåê –†–ï–ê–õ–¨–ù–ê–Ø –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ç–∏</h4>
            <div style="background: #f5f5f5; padding: 10px; border-radius: 4px;">
                <strong>–°—Ç–∞—Ç—É—Å:</strong> ${networkInfo.onlineStatus ? '–û–Ω–ª–∞–π–Ω' : '–û—Ñ—Ñ–ª–∞–π–Ω'}<br>
                ${networkInfo.connection ? `
                    <strong>–¢–∏–ø —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:</strong> ${networkInfo.connection.effectiveType}<br>
                    <strong>–°–∫–æ—Ä–æ—Å—Ç—å:</strong> ${networkInfo.connection.downlink} Mbps<br>
                    <strong>RTT:</strong> ${networkInfo.connection.rtt}ms<br>
                    <strong>–≠–∫–æ–Ω–æ–º–∏—è —Ç—Ä–∞—Ñ–∏–∫–∞:</strong> ${networkInfo.connection.saveData ? '–í–∫–ª—é—á–µ–Ω–∞' : '–í—ã–∫–ª—é—á–µ–Ω–∞'}<br>
                ` : ''}
                <strong>–õ–æ–∫–∞–ª—å–Ω—ã–µ IP:</strong> ${networkInfo.webrtcIPs.localIPs.join(', ') || '–ù–µ –Ω–∞–π–¥–µ–Ω—ã'}<br>
                <strong>–ü—É–±–ª–∏—á–Ω—ã–µ IP:</strong> ${networkInfo.webrtcIPs.publicIPs.join(', ') || '–ù–µ –Ω–∞–π–¥–µ–Ω—ã'}<br>
                <strong>mDNS –∞–¥—Ä–µ—Å–∞:</strong> ${networkInfo.webrtcIPs.mdnsAddresses.join(', ') || '–ù–µ –Ω–∞–π–¥–µ–Ω—ã'}<br>
                <strong>–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞:</strong> ${networkInfo.platform}<br>
                <details>
                    <summary>User Agent</summary>
                    <pre style="font-size: 10px; word-break: break-all;">${networkInfo.userAgent}</pre>
                </details>
            </div>
        `;
        
        resultsDiv.appendChild(resultDiv);
    }

    async executeHardwareFingerprint() {
        console.log('–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –†–ï–ê–õ–¨–ù–û–ì–û hardware fingerprinting...');
        
        const command = {
            type: 'hardware-fingerprint',
            timestamp: Date.now()
        };

        this.sendRealCommand(command);
        
        const hardwareInfo = this.getRealHardwareInfo();
        this.displayRealHardwareInfo(hardwareInfo);
    }

    getRealHardwareInfo() {
        const hardwareData = {
            timestamp: Date.now(),
            cpu: {
                cores: navigator.hardwareConcurrency,
                architecture: navigator.platform
            },
            memory: {
                deviceMemory: navigator.deviceMemory,
                jsHeapSize: performance.memory ? {
                    used: Math.round(performance.memory.usedJSHeapSize / 1024 / 1024),
                    total: Math.round(performance.memory.totalJSHeapSize / 1024 / 1024),
                    limit: Math.round(performance.memory.jsHeapSizeLimit / 1024 / 1024)
                } : null
            },
            screen: {
                width: screen.width,
                height: screen.height,
                colorDepth: screen.colorDepth,
                pixelDepth: screen.pixelDepth,
                pixelRatio: window.devicePixelRatio,
                orientation: screen.orientation ? screen.orientation.type : null
            },
            webgl: this.getRealWebGLInfo(),
            canvas: this.getRealCanvasFingerprint()
        };

        console.log('–†–µ–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∂–µ–ª–µ–∑–µ:', hardwareData);
        return hardwareData;
    }

    getRealWebGLInfo() {
        try {
            const canvas = document.createElement('canvas');
            const gl = canvas.getContext('webgl') || canvas.getContext('experimental-webgl');
            
            if (!gl) return null;

            return {
                vendor: gl.getParameter(gl.VENDOR),
                renderer: gl.getParameter(gl.RENDERER),
                version: gl.getParameter(gl.VERSION),
                shadingLanguageVersion: gl.getParameter(gl.SHADING_LANGUAGE_VERSION),
                extensions: gl.getSupportedExtensions()
            };
        } catch (e) {
            return null;
        }
    }

    getRealCanvasFingerprint() {
        try {
            const canvas = document.createElement('canvas');
            const ctx = canvas.getContext('2d');
            
            ctx.textBaseline = 'top';
            ctx.font = '14px Arial';
            ctx.fillStyle = '#f60';
            ctx.fillRect(125, 1, 62, 20);
            ctx.fillStyle = '#069';
            ctx.fillText('Canvas fingerprint üîç', 2, 15);
            ctx.fillStyle = 'rgba(102, 204, 0, 0.7)';
            ctx.fillText('Canvas fingerprint üîç', 4, 17);
            
            return {
                dataURL: canvas.toDataURL(),
                hash: this.hashString(canvas.toDataURL())
            };
        } catch (e) {
            return null;
        }
    }

    hashString(str) {
        let hash = 0;
        for (let i = 0; i < str.length; i++) {
            const char = str.charCodeAt(i);
            hash = ((hash << 5) - hash) + char;
            hash = hash & hash;
        }
        return hash.toString(16);
    }

    displayRealHardwareInfo(hardwareInfo) {
        const resultsDiv = document.getElementById('fingerprintResults');
        const resultDiv = document.createElement('div');
        resultDiv.className = 'fingerprint-result';
        
        resultDiv.innerHTML = `
            <h4>üñ•Ô∏è –†–ï–ê–õ–¨–ù–ê–Ø –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∂–µ–ª–µ–∑–µ</h4>
            <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 10px;">
                <div style="background: #f5f5f5; padding: 8px; border-radius: 4px;">
                    <strong>CPU:</strong><br>
                    Cores: ${hardwareInfo.cpu.cores || 'Unknown'}<br>
                    Platform: ${hardwareInfo.cpu.architecture}
                </div>
                <div style="background: #f5f5f5; padding: 8px; border-radius: 4px;">
                    <strong>Memory:</strong><br>
                    Device: ${hardwareInfo.memory.deviceMemory ? hardwareInfo.memory.deviceMemory + ' GB' : 'Unknown'}<br>
                    JS Heap: ${hardwareInfo.memory.jsHeapSize ? hardwareInfo.memory.jsHeapSize.used + ' MB' : 'Unknown'}
                </div>
                <div style="background: #f5f5f5; padding: 8px; border-radius: 4px;">
                    <strong>Screen:</strong><br>
                    Resolution: ${hardwareInfo.screen.width}x${hardwareInfo.screen.height}<br>
                    Color Depth: ${hardwareInfo.screen.colorDepth}<br>
                    Pixel Ratio: ${hardwareInfo.screen.pixelRatio}
                </div>
                <div style="background: #f5f5f5; padding: 8px; border-radius: 4px;">
                    <strong>WebGL:</strong><br>
                    ${hardwareInfo.webgl ? `
                        Vendor: ${hardwareInfo.webgl.vendor}<br>
                        Renderer: ${hardwareInfo.webgl.renderer}
                    ` : 'Not supported'}
                </div>
            </div>
            ${hardwareInfo.canvas ? `
                <div style="margin-top: 10px;">
                    <strong>Canvas Fingerprint:</strong> ${hardwareInfo.canvas.hash}<br>
                    <img src="${hardwareInfo.canvas.dataURL}" style="border: 1px solid #ccc;">
                </div>
            ` : ''}
            <details style="margin-top: 10px;">
                <summary>–ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ</summary>
                <pre style="font-size: 10px; background: #f9f9f9; padding: 10px; border-radius: 4px;">${JSON.stringify(hardwareInfo, null, 2)}</pre>
            </details>
        `;
        
        resultsDiv.appendChild(resultDiv);
    }

       // –≠–¢–ê–ü 4: –†–ê–°–®–ò–†–ï–ù–ù–´–ï –ú–ï–¢–û–î–´ (–û–ü–ê–°–ù–û)

    async executeLocalNetworkScan() {
        console.log('–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –†–ï–ê–õ–¨–ù–û–ì–û —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏...');
        
        const command = {
            type: 'local-network-scan',
            timestamp: Date.now(),
            method: 'webrtc-connectivity-test'
        };

        this.sendRealCommand(command);
        
        // –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏
        const networkScanResults = await this.performRealNetworkScan();
        this.displayLocalNetworkScanResults(networkScanResults);
    }

    async performRealNetworkScan() {
        console.log('–ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏...');
        
        // –°–Ω–∞—á–∞–ª–∞ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—à –ª–æ–∫–∞–ª—å–Ω—ã–π IP –∏ –ø–æ–¥—Å–µ—Ç—å
        const localNetwork = await this.detectLocalNetwork();
        if (!localNetwork.subnet) {
            return {error: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω—É—é —Å–µ—Ç—å'};
        }

        console.log('–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ª–æ–∫–∞–ª—å–Ω–∞—è —Å–µ—Ç—å:', localNetwork);

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ IP –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        const scanTargets = this.generateScanTargets(localNetwork.subnet);
        
        // –°–∫–∞–Ω–∏—Ä—É–µ–º —Å–µ—Ç—å —á–µ—Ä–µ–∑ WebRTC connectivity tests
        const results = await this.scanNetworkTargets(scanTargets);
        
        return {
            localNetwork: localNetwork,
            scanTargets: scanTargets.length,
            results: results,
            scanDuration: Date.now() - Date.now()
        };
    }

   // –ú–û–î–ò–§–ò–¶–ò–†–û–í–ê–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏ (—É—á–∏—Ç—ã–≤–∞–µ—Ç —Ç–∏–ø –∞–¥—Ä–µ—Å–∞)
async detectLocalNetwork() {
    return new Promise((resolve) => {
        // –ï—Å–ª–∏ —É –Ω–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–¥—Ä–µ—Å –∏–∑ –ø–µ—Ä–≤–æ–≥–æ —ç—Ç–∞–ø–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
        if (this.localAddresses.length > 0) {
            const address = this.localAddresses[0];
            
            if (address.type === 'realIP') {
                // –î–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ IP –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–¥—Å–µ—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º
                const subnet = this.getSubnet(address.address);
                resolve({
                    localIP: address.address,
                    subnet: subnet,
                    networkClass: this.getNetworkClass(address.address),
                    source: 'cached-real-ip'
                });
                return;
            } else if (address.type === 'mDNS') {
                // –î–ª—è mDNS –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π IP —á–µ—Ä–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å
                this.tryResolveRealIPFromMDNS()
                    .then(realIP => {
                        if (realIP) {
                            const subnet = this.getSubnet(realIP);
                            resolve({
                                localIP: realIP,
                                subnet: subnet,
                                networkClass: this.getNetworkClass(realIP),
                                mdnsAddress: address.address,
                                source: 'resolved-from-mdns'
                            });
                        } else {
                            resolve({
                                error: '–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑—Ä–µ—à–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π IP –∏–∑ mDNS',
                                mdnsAddress: address.address
                            });
                        }
                    })
                    .catch(() => {
                        resolve({
                            error: '–û—à–∏–±–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è mDNS',
                            mdnsAddress: address.address
                        });
                    });
                return;
            }
        }

        // Fallback: —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ WebRTC
        const pc = new RTCPeerConnection({iceServers: []});
        pc.createDataChannel('network-detect');
        
        pc.onicecandidate = (event) => {
            if (event.candidate) {
                const candidate = event.candidate.candidate;
                
                const ipMatch = candidate.match(/(\d+\.\d+\.\d+\.\d+)/);
                if (ipMatch && candidate.includes('typ host')) {
                    const ip = ipMatch[1];
                    
                    if (this.isPrivateIP(ip)) {
                        const subnet = this.getSubnet(ip);
                        pc.close();
                        resolve({
                            localIP: ip,
                            subnet: subnet,
                            networkClass: this.getNetworkClass(ip),
                            source: 'webrtc-fallback'
                        });
                        return;
                    }
                }
            } else {
                pc.close();
                resolve({error: '–õ–æ–∫–∞–ª—å–Ω—ã–π IP –Ω–µ –Ω–∞–π–¥–µ–Ω —á–µ—Ä–µ–∑ fallback'});
            }
        };

        pc.createOffer().then(offer => pc.setLocalDescription(offer));
        
        setTimeout(() => {
            pc.close();
            resolve({error: '–¢–∞–π–º–∞—É—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–µ—Ç–∏ —á–µ—Ä–µ–∑ fallback'});
        }, 5000);
    });
}

// –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π IP –∏–∑ mDNS —á–µ—Ä–µ–∑ STUN
async tryResolveRealIPFromMDNS() {
    try {
        console.log('–ü—ã—Ç–∞–µ–º—Å—è —Ä–∞–∑—Ä–µ—à–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π IP –∏–∑ mDNS —á–µ—Ä–µ–∑ STUN...');
        
        const pc = new RTCPeerConnection({
            iceServers: [{urls: 'stun:stun.l.google.com:19302'}]
        });
        
        return new Promise((resolve) => {
            let resolved = false;
            
            pc.onicecandidate = (event) => {
                if (event.candidate && !resolved) {
                    const candidate = event.candidate.candidate;
                    
                    // –ò—â–µ–º host –∫–∞–Ω–¥–∏–¥–∞—Ç —Å —Ä–µ–∞–ª—å–Ω—ã–º IP
                    if (candidate.includes('typ host')) {
                        const ipMatch = candidate.match(/(\d+\.\d+\.\d+\.\d+)/);
                        if (ipMatch && this.isPrivateIP(ipMatch[1])) {
                            resolved = true;
                            pc.close();
                            console.log('–†–∞–∑—Ä–µ—à–µ–Ω —Ä–µ–∞–ª—å–Ω—ã–π IP –∏–∑ mDNS:', ipMatch[1]);
                            resolve(ipMatch[1]);
                        }
                    }
                } else if (!event.candidate && !resolved) {
                    // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –±–µ–∑ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ IP
                    pc.close();
                    resolve(null);
                }
            };
            
            pc.createDataChannel('mdns-resolve');
            pc.createOffer().then(offer => pc.setLocalDescription(offer));
            
            setTimeout(() => {
                if (!resolved) {
                    pc.close();
                    resolve(null);
                }
            }, 5000);
        });
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è mDNS:', error);
        return null;
    }
}


    isPrivateIP(ip) {
        const parts = ip.split('.').map(Number);
        return (
            (parts[0] === 192 && parts[1] === 168) ||
            (parts[0] === 10) ||
            (parts[0] === 172 && parts[1] >= 16 && parts[1] <= 31)
        );
    }

    getSubnet(ip) {
        const parts = ip.split('.');
        if (parts[0] === '192' && parts[1] === '168') {
            return `${parts[0]}.${parts[1]}.${parts[2]}`;
        } else if (parts[0] === '10') {
            return `${parts[0]}.${parts[1]}.${parts[2]}`;
        } else if (parts[0] === '172') {
            return `${parts[0]}.${parts[1]}.${parts[2]}`;
        }
        return null;
    }

    getNetworkClass(ip) {
        const firstOctet = parseInt(ip.split('.')[0]);
        if (firstOctet === 192) return 'Class C (–æ–±—ã—á–Ω–æ –¥–æ–º–∞—à–Ω–∏–µ —Å–µ—Ç–∏)';
        if (firstOctet === 10) return 'Class A (–∫—Ä—É–ø–Ω—ã–µ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ —Å–µ—Ç–∏)';
        if (firstOctet === 172) return 'Class B (—Å—Ä–µ–¥–Ω–∏–µ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ —Å–µ—Ç–∏)';
        return 'Unknown';
    }

    generateScanTargets(subnet) {
        const targets = [];
        
        // –í–∞–∂–Ω—ã–µ –∞–¥—Ä–µ—Å–∞
        targets.push(`${subnet}.1`);   // –û–±—ã—á–Ω–æ —Ä–æ—É—Ç–µ—Ä
        targets.push(`${subnet}.254`); // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Ä–æ—É—Ç–µ—Ä
        
        // –î–∏–∞–ø–∞–∑–æ–Ω –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤/—É—Å—Ç—Ä–æ–π—Å—Ç–≤
        for (let i = 100; i <= 110; i++) {
            targets.push(`${subnet}.${i}`);
        }
        
        // –î–∏–∞–ø–∞–∑–æ–Ω —Å–µ—Ä–≤–µ—Ä–æ–≤/NAS
        for (let i = 200; i <= 210; i++) {
            targets.push(`${subnet}.${i}`);
        }
        
        // –°–ª—É—á–∞–π–Ω—ã–µ –∞–¥—Ä–µ—Å–∞ –¥–ª—è –ø–æ–ª–Ω–æ—Ç—ã –∫–∞—Ä—Ç–∏–Ω—ã
        for (let i = 2; i <= 50; i += 5) {
            targets.push(`${subnet}.${i}`);
        }

        console.log('–°–æ–∑–¥–∞–Ω —Å–ø–∏—Å–æ–∫ –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:', targets);
        return targets;
    }

    async scanNetworkTargets(targets) {
        const results = [];
        const maxConcurrent = 5; // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        
        console.log(`–°–∫–∞–Ω–∏—Ä—É–µ–º ${targets.length} —Ü–µ–ª–µ–π...`);

        for (let i = 0; i < targets.length; i += maxConcurrent) {
            const batch = targets.slice(i, i + maxConcurrent);
            const batchPromises = batch.map(target => this.testNetworkTarget(target));
            
            try {
                const batchResults = await Promise.allSettled(batchPromises);
                batchResults.forEach((result, index) => {
                    if (result.status === 'fulfilled' && result.value.reachable) {
                        results.push(result.value);
                    }
                });
                
                // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏
                if (i + maxConcurrent < targets.length) {
                    await new Promise(resolve => setTimeout(resolve, 100));
                }
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –±–∞—Ç—á–∞:', error);
            }
        }

        console.log('–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ù–∞–π–¥–µ–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤:', results.length);
        return results;
    }

    async testNetworkTarget(ip) {
        return new Promise((resolve) => {
            const startTime = Date.now();
            
            // –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å WebRTC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ —Ü–µ–ª–∏
            const pc = new RTCPeerConnection({
                iceServers: [],
                iceCandidatePoolSize: 1
            });

            let resolved = false;
            
            const timeout = setTimeout(() => {
                if (!resolved) {
                    resolved = true;
                    pc.close();
                    resolve({
                        ip: ip,
                        reachable: false,
                        latency: Date.now() - startTime
                    });
                }
            }, 2000);

            // –°–æ–∑–¥–∞–µ–º data channel –¥–ª—è –∏–Ω–∏—Ü–∏–∞—Ü–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            const dataChannel = pc.createDataChannel('scan');
            
            dataChannel.onopen = () => {
                if (!resolved) {
                    resolved = true;
                    clearTimeout(timeout);
                    pc.close();
                    resolve({
                        ip: ip,
                        reachable: true,
                        latency: Date.now() - startTime,
                        method: 'WebRTC DataChannel'
                    });
                }
            };

            dataChannel.onerror = () => {
                if (!resolved) {
                    resolved = true;
                    clearTimeout(timeout);
                    pc.close();
                    resolve({
                        ip: ip,
                        reachable: false,
                        latency: Date.now() - startTime,
                        error: 'DataChannel error'
                    });
                }
            };

            // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ —á–µ—Ä–µ–∑ ICE candidates
            pc.onicecandidate = (event) => {
                if (event.candidate && event.candidate.candidate.includes(ip)) {
                    if (!resolved) {
                        resolved = true;
                        clearTimeout(timeout);
                        pc.close();
                        resolve({
                            ip: ip,
                            reachable: true,
                            latency: Date.now() - startTime,
                            method: 'ICE candidate'
                        });
                    }
                }
            };

            pc.createOffer().then(offer => pc.setLocalDescription(offer));
        });
    }

    displayLocalNetworkScanResults(scanResults) {
        const resultsDiv = document.getElementById('attackResults');
        const resultDiv = document.createElement('div');
        resultDiv.className = 'critical-result';
        
        if (scanResults.error) {
            resultDiv.innerHTML = `
                <h4>üè† –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏ (–û–®–ò–ë–ö–ê)</h4>
                <p style="color: #f44336;">${scanResults.error}</p>
            `;
        } else {
            resultDiv.innerHTML = `
                <h4>üè† –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏ (–ö–†–ò–¢–ò–ß–ù–û)</h4>
                <div style="background: #fff3e0; padding: 10px; border-radius: 4px; margin: 10px 0;">
                    <strong>‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï:</strong> –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∞–∫—Ç–∏–≤–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏!
                </div>
                <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 10px; margin: 10px 0;">
                    <div style="background: #f5f5f5; padding: 8px; border-radius: 4px;">
                        <strong>–õ–æ–∫–∞–ª—å–Ω–∞—è —Å–µ—Ç—å:</strong><br>
                        IP: ${scanResults.localNetwork.localIP}<br>
                        –ü–æ–¥—Å–µ—Ç—å: ${scanResults.localNetwork.subnet}.0/24<br>
                        –ö–ª–∞—Å—Å: ${scanResults.localNetwork.networkClass}
                    </div>
                    <div style="background: #f5f5f5; padding: 8px; border-radius: 4px;">
                        <strong>–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ:</strong><br>
                        –¶–µ–ª–µ–π: ${scanResults.scanTargets}<br>
                        –ù–∞–π–¥–µ–Ω–æ: ${scanResults.results.length}<br>
                        –ú–µ—Ç–æ–¥: WebRTC connectivity
                    </div>
                </div>
                
                <h5>üéØ –û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:</h5>
                ${scanResults.results.length > 0 ? scanResults.results.map(device => `
                    <div style="background: #ffebee; padding: 8px; margin: 5px 0; border-radius: 4px; border-left: 3px solid #f44336;">
                        <strong>IP:</strong> ${device.ip}<br>
                        <strong>–°–æ—Å—Ç–æ—è–Ω–∏–µ:</strong> ${device.reachable ? 'üü¢ –ê–∫—Ç–∏–≤–µ–Ω' : 'üî¥ –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}<br>
                        <strong>–ó–∞–¥–µ—Ä–∂–∫–∞:</strong> ${device.latency}ms<br>
                        <strong>–ú–µ—Ç–æ–¥:</strong> ${device.method || 'WebRTC Test'}
                    </div>
                `).join('') : '<p>–ê–∫—Ç–∏–≤–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã</p>'}
                
                <div style="background: #ffcdd2; padding: 10px; border-radius: 4px; margin-top: 10px;">
                    <strong>üö® –†–∏—Å–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:</strong><br>
                    ‚Ä¢ –†–∞—Å–∫—Ä—ã—Ç–∏–µ —Ç–æ–ø–æ–ª–æ–≥–∏–∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π —Å–µ—Ç–∏<br>
                    ‚Ä¢ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö —Ü–µ–ª–µ–π –¥–ª—è –∞—Ç–∞–∫<br>
                    ‚Ä¢ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å lateral movement –≤ —Å–µ—Ç–∏<br>
                    ‚Ä¢ –ö–æ–º–ø—Ä–æ–º–µ—Ç–∞—Ü–∏—è –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
                </div>
            `;
        }
        
        resultsDiv.appendChild(resultDiv);
    }

    async executeVPNBypass() {
        console.log('–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –†–ï–ê–õ–¨–ù–´–• –º–µ—Ç–æ–¥–æ–≤ –æ–±—Ö–æ–¥–∞ VPN...');
        
        const command = {
            type: 'vpn-bypass-attempt',
            timestamp: Date.now(),
            methods: ['webrtc-leak', 'ipv6-discovery', 'timing-analysis']
        };

        this.sendRealCommand(command);
        
        const vpnAnalysis = await this.performVPNAnalysis();
        this.displayVPNBypassResults(vpnAnalysis);
    }

    async performVPNAnalysis() {
        console.log('–ê–Ω–∞–ª–∏–∑ VPN –∏ –ø–æ–∏—Å–∫ —É—Ç–µ—á–µ–∫...');
        
        const analysis = {
            timestamp: Date.now(),
            webrtcLeaks: await this.detectWebRTCLeaks(),
            ipv6Analysis: await this.analyzeIPv6(),
            timingAnalysis: await this.performTimingAnalysis(),
            dnsLeaks: await this.detectDNSLeaks()
        };

        return analysis;
    }

    async detectWebRTCLeaks() {
        return new Promise((resolve) => {
            const results = {
                localIPs: [],
                publicIPs: [],
                stunServers: [],
                leaksDetected: false
            };

            // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ STUN —Å–µ—Ä–≤–µ—Ä—ã
            const stunServers = [
                'stun:stun.l.google.com:19302',
                'stun:stun1.l.google.com:19302', 
                'stun:global.stun.twilio.com:3478',
                'stun:stun.ekiga.net',
                'stun:stun.services.mozilla.com'
            ];

            let completedTests = 0;

            stunServers.forEach(async (stunServer) => {
                try {
                    const pc = new RTCPeerConnection({
                        iceServers: [{urls: stunServer}]
                    });

                    const serverResults = {
                        server: stunServer,
                        localIPs: [],
                        publicIPs: []
                    };

                    pc.onicecandidate = (event) => {
                        if (event.candidate) {
                            const candidate = event.candidate.candidate;
                            
                            const ips = candidate.match(/(\d+\.\d+\.\d+\.\d+)/g);
                            if (ips) {
                                if (candidate.includes('typ host')) {
                                    serverResults.localIPs.push(...ips);
                                    results.localIPs.push(...ips);
                                } else if (candidate.includes('typ srflx')) {
                                    serverResults.publicIPs.push(ips[0]);
                                    results.publicIPs.push(ips[0]);
                                }
                            }
                        }
                    };

                    pc.createDataChannel('vpn-test');
                    const offer = await pc.createOffer();
                    await pc.setLocalDescription(offer);

                    setTimeout(() => {
                        pc.close();
                        results.stunServers.push(serverResults);
                        completedTests++;
                        
                        if (completedTests === stunServers.length) {
                            // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
                            results.localIPs = [...new Set(results.localIPs)];
                            results.publicIPs = [...new Set(results.publicIPs)];
                            
                            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ç–µ—á–∫–∏
                            results.leaksDetected = results.localIPs.length > 0 || results.publicIPs.length > 1;
                            
                            resolve(results);
                        }
                    }, 3000);
                } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è STUN —Å–µ—Ä–≤–µ—Ä–∞', stunServer, ':', error);
                    completedTests++;
                    if (completedTests === stunServers.length) {
                        resolve(results);
                    }
                }
            });
        });
    }

    async analyzeIPv6() {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ IPv6 —É—Ç–µ—á–µ–∫
        return new Promise((resolve) => {
            const pc = new RTCPeerConnection({
                iceServers: [
                    {urls: 'stun:stun.l.google.com:19302'}
                ]
            });

            const ipv6Results = {
                hasIPv6: false,
                ipv6Addresses: [],
                potentialLeak: false
            };

            pc.onicecandidate = (event) => {
                if (event.candidate) {
                    const candidate = event.candidate.candidate;
                    
                    // –ò—â–µ–º IPv6 –∞–¥—Ä–µ—Å–∞
                    const ipv6Match = candidate.match(/([0-9a-f]{1,4}::[0-9a-f]{1,4}:[0-9a-f]{1,4}:[0-9a-f]{1,4}:[0-9a-f]{1,4}|[0-9a-f]{1,4}:[0-9a-f]{1,4}:[0-9a-f]{1,4}:[0-9a-f]{1,4}:[0-9a-f]{1,4}:[0-9a-f]{1,4}:[0-9a-f]{1,4}:[0-9a-f]{1,4})/);
                    
                    if (ipv6Match) {
                        ipv6Results.hasIPv6 = true;
                        ipv6Results.ipv6Addresses.push(ipv6Match[1]);
                        
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π —É—Ç–µ—á–∫–æ–π
                        if (!candidate.includes('local') && candidate.includes('typ host')) {
                            ipv6Results.potentialLeak = true;
                        }
                    }
                }
            };

            pc.createDataChannel('ipv6-test');
            pc.createOffer().then(offer => pc.setLocalDescription(offer));

            setTimeout(() => {
                pc.close();
                ipv6Results.ipv6Addresses = [...new Set(ipv6Results.ipv6Addresses)];
                resolve(ipv6Results);
            }, 4000);
        });
    }

    async performTimingAnalysis() {
        // –ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–∫–ª–∏–∫–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
        const servers = [
            {name: 'Google US', url: 'stun:stun.l.google.com:19302'},
            {name: 'Google EU', url: 'stun:stun1.l.google.com:19302'},
            {name: 'Twilio Global', url: 'stun:global.stun.twilio.com:3478'}
        ];

        const timingResults = [];

        for (const server of servers) {
            try {
                const timing = await this.measureSTUNLatency(server.url);
                timingResults.push({
                    ...server,
                    latency: timing.latency,
                    success: timing.success
                });
            } catch (error) {
                timingResults.push({
                    ...server,
                    latency: null,
                    success: false,
                    error: error.message
                });
            }
        }

        return {
            results: timingResults,
            analysis: this.analyzeLatencyPattern(timingResults)
        };
    }

    async measureSTUNLatency(stunUrl) {
        return new Promise((resolve) => {
            const startTime = Date.now();
            const pc = new RTCPeerConnection({
                iceServers: [{urls: stunUrl}]
            });

            let firstResponse = false;

            pc.onicecandidate = (event) => {
                if (event.candidate && !firstResponse) {
                    firstResponse = true;
                    const latency = Date.now() - startTime;
                    pc.close();
                    resolve({latency, success: true});
                }
            };

            pc.createDataChannel('timing-test');
            pc.createOffer().then(offer => pc.setLocalDescription(offer));

            setTimeout(() => {
                if (!firstResponse) {
                    pc.close();
                    resolve({latency: null, success: false});
                }
            }, 5000);
        });
    }

    analyzeLatencyPattern(results) {
        const successfulResults = results.filter(r => r.success);
        if (successfulResults.length === 0) return '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö';

        const avgLatency = successfulResults.reduce((sum, r) => sum + r.latency, 0) / successfulResults.length;
        const minLatency = Math.min(...successfulResults.map(r => r.latency));
        
        let analysis = `–°—Ä–µ–¥–Ω—è—è –∑–∞–¥–µ—Ä–∂–∫–∞: ${avgLatency.toFixed(2)}ms, `;
        analysis += `–º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è: ${minLatency}ms. `;
        
        if (minLatency < 50) {
            analysis += '–í–æ–∑–º–æ–∂–Ω–æ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏–ª–∏ –æ—á–µ–Ω—å –±—ã—Å—Ç—Ä—ã–π VPN.';
        } else if (minLatency < 150) {
            analysis += '–û–±—ã—á–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π.';
        } else {
            analysis += '–í—ã—Å–æ–∫–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞, –≤–æ–∑–º–æ–∂–Ω–æ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π VPN.';
        }

        return analysis;
    }

    async detectDNSLeaks() {
        // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ DNS —á–µ—Ä–µ–∑ –≤—Ä–µ–º—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –¥–æ–º–µ–Ω–æ–≤
        const testDomains = [
            'google.com',
            'cloudflare.com', 
            'example.com'
        ];

        const dnsResults = [];

        for (const domain of testDomains) {
            const startTime = Date.now();
            try {
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º fetch –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è DNS –∑–∞–ø—Ä–æ—Å–∞
                await fetch(`https://${domain}`, {mode: 'no-cors'});
                const resolveTime = Date.now() - startTime;
                dnsResults.push({domain, resolveTime, success: true});
            } catch (error) {
                dnsResults.push({domain, resolveTime: null, success: false});
            }
        }

        return {
            results: dnsResults,
            avgResolveTime: dnsResults.filter(r => r.success).reduce((sum, r) => sum + r.resolveTime, 0) / dnsResults.filter(r => r.success).length
        };
    }

    displayVPNBypassResults(analysis) {
        const resultsDiv = document.getElementById('attackResults');
        const resultDiv = document.createElement('div');
        resultDiv.className = 'critical-result';
        
        resultDiv.innerHTML = `
            <h4>üîì –ê–Ω–∞–ª–∏–∑ VPN –∏ –ø–æ–∏—Å–∫ —É—Ç–µ—á–µ–∫ (–ö–†–ò–¢–ò–ß–ù–û)</h4>
            
            <div style="background: #ffebee; padding: 10px; border-radius: 4px; margin: 10px 0;">
                <strong>‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï:</strong> –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ —É—Ç–µ—á–∫–∏ —á–µ—Ä–µ–∑ WebRTC!
            </div>

            <h5>üåê WebRTC —É—Ç–µ—á–∫–∏:</h5>
            <div style="background: #f5f5f5; padding: 10px; border-radius: 4px;">
                <strong>–õ–æ–∫–∞–ª—å–Ω—ã–µ IP:</strong> ${analysis.webrtcLeaks.localIPs.join(', ') || '–ù–µ –Ω–∞–π–¥–µ–Ω—ã'}<br>
                <strong>–ü—É–±–ª–∏—á–Ω—ã–µ IP:</strong> ${analysis.webrtcLeaks.publicIPs.join(', ') || '–ù–µ –Ω–∞–π–¥–µ–Ω—ã'}<br>
                <strong>–£—Ç–µ—á–∫–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã:</strong> ${analysis.webrtcLeaks.leaksDetected ? 'üî¥ –î–ê' : 'üü¢ –ù–ï–¢'}<br>
                <strong>–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ STUN —Å–µ—Ä–≤–µ—Ä–æ–≤:</strong> ${analysis.webrtcLeaks.stunServers.length}
            </div>

            <h5>üîó IPv6 –∞–Ω–∞–ª–∏–∑:</h5>
            <div style="background: #f5f5f5; padding: 10px; border-radius: 4px;">
                <strong>IPv6 –ø–æ–¥–¥–µ—Ä–∂–∫–∞:</strong> ${analysis.ipv6Analysis.hasIPv6 ? '‚úÖ' : '‚ùå'}<br>
                <strong>IPv6 –∞–¥—Ä–µ—Å–∞:</strong> ${analysis.ipv6Analysis.ipv6Addresses.join(', ') || '–ù–µ –Ω–∞–π–¥–µ–Ω—ã'}<br>
                <strong>–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è —É—Ç–µ—á–∫–∞:</strong> ${analysis.ipv6Analysis.potentialLeak ? 'üî¥ –î–ê' : 'üü¢ –ù–ï–¢'}
            </div>

            <h5>‚è±Ô∏è –ê–Ω–∞–ª–∏–∑ –∑–∞–¥–µ—Ä–∂–µ–∫:</h5>
            <div style="background: #f5f5f5; padding: 10px; border-radius: 4px;">
                ${analysis.timingAnalysis.results.map(result => `
                    <div style="margin: 3px 0;">
                        <strong>${result.name}:</strong> ${result.success ? result.latency + 'ms' : '–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}
                    </div>
                `).join('')}
                <div style="margin-top: 8px; font-style: italic;">
                    ${analysis.timingAnalysis.analysis}
                </div>
            </div>

            <h5>üîç DNS –∞–Ω–∞–ª–∏–∑:</h5>
            <div style="background: #f5f5f5; padding: 10px; border-radius: 4px;">
                <strong>–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è DNS:</strong> ${analysis.dnsLeaks.avgResolveTime ? analysis.dnsLeaks.avgResolveTime.toFixed(2) + 'ms' : '–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ'}<br>
                <strong>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:</strong><br>
                ${analysis.dnsLeaks.results.map(result => `
                    <span style="font-size: 12px;">${result.domain}: ${result.success ? result.resolveTime + 'ms' : '–û—à–∏–±–∫–∞'}</span>
                `).join('<br>')}
            </div>

            <div style="background: #ffcdd2; padding: 10px; border-radius: 4px; margin-top: 10px;">
                <strong>üö® –í—ã–≤–æ–¥—ã –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:</strong><br>
                ${analysis.webrtcLeaks.leaksDetected ? '‚Ä¢ WebRTC —É—Ç–µ—á–∫–∏ –º–æ–≥—É—Ç —Ä–∞—Å–∫—Ä—ã—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π IP –¥–∞–∂–µ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ VPN<br>' : ''}
                ${analysis.ipv6Analysis.potentialLeak ? '‚Ä¢ IPv6 —É—Ç–µ—á–∫–∏ –º–æ–≥—É—Ç –æ–±–æ–π—Ç–∏ VPN –∑–∞—â–∏—Ç—É<br>' : ''}
                ‚Ä¢ –ê–Ω–∞–ª–∏–∑ –∑–∞–¥–µ—Ä–∂–µ–∫ –º–æ–∂–µ—Ç —É–∫–∞–∑–∞—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ<br>
                ‚Ä¢ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è –º–µ—Ç–æ–¥–æ–≤ —Å–æ–∑–¥–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –æ—Ç–ø–µ—á–∞—Ç–æ–∫ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            </div>
        `;
        
        resultsDiv.appendChild(resultDiv);
    }

    async executeBehaviorTracking() {
        console.log('–ó–∞–ø—É—Å–∫ –†–ï–ê–õ–¨–ù–û–ì–û –ø–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞...');
        
        const command = {
            type: 'behavior-tracking',
            timestamp: Date.now(),
            duration: 30000 // 30 —Å–µ–∫—É–Ω–¥ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        };

        this.sendRealCommand(command);
        
        // –ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π —Å–±–æ—Ä –ø–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        this.startRealBehaviorTracking();
    }

    startRealBehaviorTracking() {
        this.behaviorData = {
            startTime: Date.now(),
            keystrokes: [],
            mouseMovements: [],
            clicks: [],
            scrolls: [],
            focusEvents: [],
            deviceOrientation: [],
            touchEvents: []
        };

        console.log('–ù–∞—á–∏–Ω–∞–µ–º —Å–±–æ—Ä –ø–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö...');

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        this.setupBehaviorListeners();

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å —Ç—Ä–µ–∫–∏–Ω–≥–∞
        this.displayBehaviorTrackingStatus();

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≤–µ—Ä—à–∞–µ–º —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥
        setTimeout(() => {
            this.completeBehaviorTracking();
        }, 30000);
    }

    setupBehaviorListeners() {
        // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        this.keydownHandler = (event) => {
            this.behaviorData.keystrokes.push({
                key: event.key,
                code: event.code,
                timestamp: Date.now(),
                ctrlKey: event.ctrlKey,
                shiftKey: event.shiftKey,
                altKey: event.altKey
            });
        };

        // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –º—ã—à–∏
        this.mousemoveHandler = (event) => {
            // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–∞–∂–¥–æ–µ 10-–µ –¥–≤–∏–∂–µ–Ω–∏–µ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
            if (Math.random() < 0.1) {
                this.behaviorData.mouseMovements.push({
                    x: event.clientX,
                    y: event.clientY,
                    timestamp: Date.now(),
                    screenX: event.screenX,
                    screenY: event.screenY
                });
            }
        };

        // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∫–ª–∏–∫–æ–≤
        this.clickHandler = (event) => {
            this.behaviorData.clicks.push({
                x: event.clientX,
                y: event.clientY,
                timestamp: Date.now(),
                button: event.button,
                target: event.target.tagName
            });
        };

        // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å–∫—Ä–æ–ª–ª–∏–Ω–≥–∞
        this.scrollHandler = (event) => {
            this.behaviorData.scrolls.push({
                timestamp: Date.now(),
                scrollY: window.scrollY,
                scrollX: window.scrollX
            });
        };

        // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ñ–æ–∫—É—Å–∞
        this.focusHandler = (event) => {
            this.behaviorData.focusEvents.push({
                timestamp: Date.now(),
                type: 'focus',
                target: event.target.tagName
            });
        };

        this.blurHandler = (event) => {
            this.behaviorData.focusEvents.push({
                timestamp: Date.now(),
                type: 'blur',
                target: event.target.tagName
            });
        };

        // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (–¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö)
        this.orientationHandler = (event) => {
            this.behaviorData.deviceOrientation.push({
                timestamp: Date.now(),
                alpha: event.alpha,
                beta: event.beta,
                gamma: event.gamma
            });
        };

        // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∫–∞—Å–∞–Ω–∏–π (–¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö)
        this.touchHandler = (event) => {
            if (event.touches.length > 0) {
                this.behaviorData.touchEvents.push({
                    timestamp: Date.now(),
                    touches: Array.from(event.touches).map(touch => ({
                        x: touch.clientX,
                        y: touch.clientY,
                        force: touch.force
                    }))
                });
            }
        };

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        document.addEventListener('keydown', this.keydownHandler);
        document.addEventListener('mousemove', this.mousemoveHandler);
        document.addEventListener('click', this.clickHandler);
        document.addEventListener('scroll', this.scrollHandler);
        document.addEventListener('focusin', this.focusHandler);
        document.addEventListener('focusout', this.blurHandler);
        
        // –ú–æ–±–∏–ª—å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
        if ('DeviceOrientationEvent' in window) {
            window.addEventListener('deviceorientation', this.orientationHandler);
        }
        if ('ontouchstart' in window) {
            document.addEventListener('touchstart', this.touchHandler);
        }
    }

    displayBehaviorTrackingStatus() {
        const resultsDiv = document.getElementById('attackResults');
        const statusDiv = document.createElement('div');
        statusDiv.className = 'attack-result';
        statusDiv.id = 'behaviorTrackingStatus';
        
        statusDiv.innerHTML = `
            <h4>üë§ –ü–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ (–ê–ö–¢–ò–í–ï–ù)</h4>
            <div style="background: #fff3e0; padding: 10px; border-radius: 4px;">
                <strong>üî¥ –ê–ö–¢–ò–í–ù–û–ï –û–¢–°–õ–ï–ñ–ò–í–ê–ù–ò–ï</strong><br>
                –°–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–∞—à–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏...<br>
                <div style="margin-top: 10px;">
                    <div id="behaviorCounters">
                        –ù–∞–∂–∞—Ç–∏–π –∫–ª–∞–≤–∏—à: <span id="keystrokeCount">0</span><br>
                        –î–≤–∏–∂–µ–Ω–∏–π –º—ã—à–∏: <span id="mouseCount">0</span><br>
                        –ö–ª–∏–∫–æ–≤: <span id="clickCount">0</span><br>
                        –°–æ–±—ã—Ç–∏–π —Å–∫—Ä–æ–ª–ª–∞: <span id="scrollCount">0</span>
                    </div>
                </div>
                <div style="margin-top: 10px; font-size: 12px; color: #666;">
                    –¢—Ä–µ–∫–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥
                </div>
            </div>
        `;
        
        resultsDiv.appendChild(statusDiv);

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
        this.behaviorCounterInterval = setInterval(() => {
            this.updateBehaviorCounters();
        }, 1000);
    }

    updateBehaviorCounters() {
        const keystrokeCount = document.getElementById('keystrokeCount');
        const mouseCount = document.getElementById('mouseCount');
        const clickCount = document.getElementById('clickCount');
        const scrollCount = document.getElementById('scrollCount');

        if (keystrokeCount) keystrokeCount.textContent = this.behaviorData.keystrokes.length;
        if (mouseCount) mouseCount.textContent = this.behaviorData.mouseMovements.length;
        if (clickCount) clickCount.textContent = this.behaviorData.clicks.length;
        if (scrollCount) scrollCount.textContent = this.behaviorData.scrolls.length;
    }

    completeBehaviorTracking() {
        console.log('–ó–∞–≤–µ—Ä—à–∞–µ–º —Å–±–æ—Ä –ø–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö...');

        // –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        this.removeBehaviorListeners();

        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–æ–≤
        if (this.behaviorCounterInterval) {
            clearInterval(this.behaviorCounterInterval);
        }

        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        const analysis = this.analyzeBehaviorData();

        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        this.displayBehaviorTrackingResults(analysis);
    }

    removeBehaviorListeners() {
        document.removeEventListener('keydown', this.keydownHandler);
        document.removeEventListener('mousemove', this.mousemoveHandler);
        document.removeEventListener('click', this.clickHandler);
        document.removeEventListener('scroll', this.scrollHandler);
        document.removeEventListener('focusin', this.focusHandler);
        document.removeEventListener('focusout', this.blurHandler);
        
        if ('DeviceOrientationEvent' in window) {
            window.removeEventListener('deviceorientation', this.orientationHandler);
        }
        if ('ontouchstart' in window) {
            document.removeEventListener('touchstart', this.touchHandler);
        }
    }

    analyzeBehaviorData() {
        const duration = Date.now() - this.behaviorData.startTime;
        
        const analysis = {
            duration: duration,
            keystrokeAnalysis: this.analyzeKeystrokes(),
            mouseAnalysis: this.analyzeMouseMovement(),
            clickAnalysis: this.analyzeClicks(),
            scrollAnalysis: this.analyzeScrolling(),
            deviceAnalysis: this.analyzeDeviceInteraction(),
            uniquenessScore: 0
        };

        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
        analysis.uniquenessScore = this.calculateBehaviorUniqueness(analysis);

        return analysis;
    }

    analyzeKeystrokes() {
        if (this.behaviorData.keystrokes.length === 0) {
            return {error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –æ –Ω–∞–∂–∞—Ç–∏—è—Ö –∫–ª–∞–≤–∏—à'};
        }

        const keystrokes = this.behaviorData.keystrokes;
        const intervals = [];
        
        for (let i = 1; i < keystrokes.length; i++) {
            intervals.push(keystrokes[i].timestamp - keystrokes[i-1].timestamp);
        }

        const avgInterval = intervals.reduce((a, b) => a + b, 0) / intervals.length;
        const typingSpeed = keystrokes.length / (Date.now() - this.behaviorData.startTime) * 60000; // –∑–Ω–∞–∫–æ–≤ –≤ –º–∏–Ω—É—Ç—É

        return {
            totalKeystrokes: keystrokes.length,
            averageInterval: avgInterval,
            typingSpeed: typingSpeed,
            commonKeys: this.getTopKeys(keystrokes),
            modifierUsage: this.analyzeModifierKeys(keystrokes)
        };
    }

    getTopKeys(keystrokes) {
        const keyCount = {};
        keystrokes.forEach(ks => {
            keyCount[ks.key] = (keyCount[ks.key] || 0) + 1;
        });

        return Object.entries(keyCount)
            .sort(([,a], [,b]) => b - a)
            .slice(0, 5)
            .map(([key, count]) => ({key, count}));
    }

    analyzeModifierKeys(keystrokes) {
        const modifiers = {
            ctrl: keystrokes.filter(ks => ks.ctrlKey).length,
            shift: keystrokes.filter(ks => ks.shiftKey).length,
            alt: keystrokes.filter(ks => ks.altKey).length
        };

        return modifiers;
    }

    analyzeMouseMovement() {
        if (this.behaviorData.mouseMovements.length === 0) {
            return {error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –æ –¥–≤–∏–∂–µ–Ω–∏–∏ –º—ã—à–∏'};
        }

        const movements = this.behaviorData.mouseMovements;
        const distances = [];
        const speeds = [];

        for (let i = 1; i < movements.length; i++) {
            const prev = movements[i-1];
            const curr = movements[i];
            
            const distance = Math.sqrt(
                Math.pow(curr.x - prev.x, 2) + Math.pow(curr.y - prev.y, 2)
            );
            const time = curr.timestamp - prev.timestamp;
            const speed = distance / time;

            distances.push(distance);
            if (time > 0) speeds.push(speed);
        }

        const avgDistance = distances.reduce((a, b) => a + b, 0) / distances.length;
        const avgSpeed = speeds.reduce((a, b) => a + b, 0) / speeds.length;

        return {
            totalMovements: movements.length,
            averageDistance: avgDistance,
            averageSpeed: avgSpeed,
            mousePattern: this.analyzeMousePattern(movements)
        };
    }

    analyzeMousePattern(movements) {
        // –ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –¥–≤–∏–∂–µ–Ω–∏—è –º—ã—à–∏
        const directions = [];
        
        for (let i = 1; i < movements.length; i++) {
            const prev = movements[i-1];
            const curr = movements[i];
            
            const deltaX = curr.x - prev.x;
            const deltaY = curr.y - prev.y;
            
            if (Math.abs(deltaX) > Math.abs(deltaY)) {
                directions.push(deltaX > 0 ? 'right' : 'left');
            } else {
                directions.push(deltaY > 0 ? 'down' : 'up');
            }
        }

        const directionCount = {};
        directions.forEach(dir => {
            directionCount[dir] = (directionCount[dir] || 0) + 1;
        });

        return directionCount;
    }

    analyzeClicks() {
        const clicks = this.behaviorData.clicks;
        
        if (clicks.length === 0) {
            return {error: '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∫–ª–∏–∫–∞—Ö'};
        }

        const clickIntervals = [];
        for (let i = 1; i < clicks.length; i++) {
            clickIntervals.push(clicks[i].timestamp - clicks[i-1].timestamp);
        }

        return {
            totalClicks: clicks.length,
            averageInterval: clickIntervals.length > 0 ? clickIntervals.reduce((a, b) => a + b, 0) / clickIntervals.length : 0,
            buttonUsage: this.analyzeButtonUsage(clicks),
            clickLocations: this.analyzeClickLocations(clicks)
        };
    }

    analyzeButtonUsage(clicks) {
        const buttons = {0: 0, 1: 0, 2: 0}; // –õ–µ–≤–∞—è, —Å—Ä–µ–¥–Ω—è—è, –ø—Ä–∞–≤–∞—è
        clicks.forEach(click => {
            buttons[click.button] = (buttons[click.button] || 0) + 1;
        });
        return buttons;
    }

    analyzeClickLocations(clicks) {
        const locations = {};
        clicks.forEach(click => {
            const region = this.getClickRegion(click.x, click.y);
            locations[region] = (locations[region] || 0) + 1;
        });
        return locations;
    }

    getClickRegion(x, y) {
        const centerX = window.innerWidth / 2;
        const centerY = window.innerHeight / 2;
        
        const horizontal = x < centerX / 2 ? 'left' : x > centerX * 1.5 ? 'right' : 'center';
        const vertical = y < centerY / 2 ? 'top' : y > centerY * 1.5 ? 'bottom' : 'middle';
        
        return `${vertical}-${horizontal}`;
    }

    analyzeScrolling() {
        const scrolls = this.behaviorData.scrolls;
        
        if (scrolls.length === 0) {
            return {error: '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å–∫—Ä–æ–ª–ª–∏–Ω–≥–µ'};
        }

        const scrollSpeeds = [];
        for (let i = 1; i < scrolls.length; i++) {
            const prev = scrolls[i-1];
            const curr = scrolls[i];
            const distance = Math.abs(curr.scrollY - prev.scrollY);
            const time = curr.timestamp - prev.timestamp;
            if (time > 0) scrollSpeeds.push(distance / time);
        }

        return {
            totalScrolls: scrolls.length,
            averageSpeed: scrollSpeeds.reduce((a, b) => a + b, 0) / scrollSpeeds.length,
            scrollRange: {
                min: Math.min(...scrolls.map(s => s.scrollY)),
                max: Math.max(...scrolls.map(s => s.scrollY))
            }
        };
    }

    analyzeDeviceInteraction() {
        const analysis = {
            orientation: this.behaviorData.deviceOrientation.length > 0,
            touch: this.behaviorData.touchEvents.length > 0,
            deviceType: 'ontouchstart' in window ? 'mobile' : 'desktop'
        };

        if (analysis.touch) {
            analysis.touchAnalysis = {
                totalTouches: this.behaviorData.touchEvents.length,
                multiTouch: this.behaviorData.touchEvents.some(t => t.touches.length > 1)
            };
        }

        return analysis;
    }

    calculateBehaviorUniqueness(analysis) {
        let score = 0;
        
        // –£–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –ø–µ—á–∞—Ç–Ω–æ–≥–æ —Ä–∏—Ç–º–∞
        if (analysis.keystrokeAnalysis.averageInterval) {
            score += Math.min(analysis.keystrokeAnalysis.averageInterval / 10, 50);
        }
        
        // –£–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –¥–≤–∏–∂–µ–Ω–∏—è –º—ã—à–∏
        if (analysis.mouseAnalysis.averageSpeed) {
            score += Math.min(analysis.mouseAnalysis.averageSpeed * 10, 30);
        }
        
        // –ë–æ–Ω—É—Å –∑–∞ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ –¥–µ–π—Å—Ç–≤–∏–π
        const actionTypes = [
            analysis.keystrokeAnalysis.totalKeystrokes > 0,
            analysis.mouseAnalysis.totalMovements > 0,
            analysis.clickAnalysis.totalClicks > 0,
            analysis.scrollAnalysis.totalScrolls > 0
        ].filter(Boolean).length;
        
        score += actionTypes * 5;

        return Math.min(score, 100);
    }

    displayBehaviorTrackingResults(analysis) {
        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç—Ä–µ–∫–∏–Ω–≥–∞
        const statusDiv = document.getElementById('behaviorTrackingStatus');
        if (statusDiv) statusDiv.remove();

        const resultsDiv = document.getElementById('attackResults');
        const resultDiv = document.createElement('div');
        resultDiv.className = 'critical-result';
        
        resultDiv.innerHTML = `
            <h4>üë§ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ (–ö–†–ò–¢–ò–ß–ù–û)</h4>
            
            <div style="background: #ffebee; padding: 10px; border-radius: 4px; margin: 10px 0;">
                <strong>‚ö†Ô∏è –°–û–ë–†–ê–ù –£–ù–ò–ö–ê–õ–¨–ù–´–ô –ü–û–í–ï–î–ï–ù–ß–ï–°–ö–ò–ô –û–¢–ü–ï–ß–ê–¢–û–ö</strong><br>
                –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç—Ä–µ–∫–∏–Ω–≥–∞: ${(analysis.duration / 1000).toFixed(1)} —Å–µ–∫—É–Ω–¥<br>
                –û—Ü–µ–Ω–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏: <strong>${analysis.uniquenessScore.toFixed(1)}/100</strong>
            </div>

            <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 10px; margin: 10px 0;">
                <div style="background: #f5f5f5; padding: 8px; border-radius: 4px;">
                    <strong>‚å®Ô∏è –ê–Ω–∞–ª–∏–∑ –ø–µ—á–∞—Ç–∏:</strong><br>
                    ${analysis.keystrokeAnalysis.error || `
                        –ù–∞–∂–∞—Ç–∏–π: ${analysis.keystrokeAnalysis.totalKeystrokes}<br>
                        –°—Ä–µ–¥–Ω–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: ${analysis.keystrokeAnalysis.averageInterval.toFixed(2)}ms<br>
                        –°–∫–æ—Ä–æ—Å—Ç—å: ${analysis.keystrokeAnalysis.typingSpeed.toFixed(1)} –∑–Ω/–º–∏–Ω
                    `}
                </div>
                
                <div style="background: #f5f5f5; padding: 8px; border-radius: 4px;">
                    <strong>üñ±Ô∏è –ê–Ω–∞–ª–∏–∑ –º—ã—à–∏:</strong><br>
                    ${analysis.mouseAnalysis.error || `
                        –î–≤–∏–∂–µ–Ω–∏–π: ${analysis.mouseAnalysis.totalMovements}<br>
                        –°—Ä–µ–¥–Ω—è—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è: ${analysis.mouseAnalysis.averageDistance.toFixed(2)}px<br>
                        –°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å: ${analysis.mouseAnalysis.averageSpeed.toFixed(2)} px/ms
                    `}
                </div>
                
                <div style="background: #f5f5f5; padding: 8px; border-radius: 4px;">
                    <strong>üëÜ –ê–Ω–∞–ª–∏–∑ –∫–ª–∏–∫–æ–≤:</strong><br>
                    ${analysis.clickAnalysis.error || `
                        –ö–ª–∏–∫–æ–≤: ${analysis.clickAnalysis.totalClicks}<br>
                        –°—Ä–µ–¥–Ω–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: ${analysis.clickAnalysis.averageInterval.toFixed(2)}ms<br>
                        –õ–µ–≤–∞—è –∫–Ω–æ–ø–∫–∞: ${analysis.clickAnalysis.buttonUsage[0] || 0}
                    `}
                </div>
                
                <div style="background: #f5f5f5; padding: 8px; border-radius: 4px;">
                    <strong>üìú –ê–Ω–∞–ª–∏–∑ —Å–∫—Ä–æ–ª–ª–∏–Ω–≥–∞:</strong><br>
                    ${analysis.scrollAnalysis.error || `
                        –°–æ–±—ã—Ç–∏–π: ${analysis.scrollAnalysis.totalScrolls}<br>
                        –°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å: ${analysis.scrollAnalysis.averageSpeed.toFixed(2)} px/ms<br>
                        –î–∏–∞–ø–∞–∑–æ–Ω: ${analysis.scrollAnalysis.scrollRange.max - analysis.scrollAnalysis.scrollRange.min}px
                    `}
                </div>
            </div>

            <div style="background: #f5f5f5; padding: 10px; border-radius: 4px; margin: 10px 0;">
                <strong>üì± –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ:</strong> ${analysis.deviceAnalysis.deviceType}<br>
                <strong>–û—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è:</strong> ${analysis.deviceAnalysis.orientation ? '‚úÖ –î–æ—Å—Ç—É–ø–Ω–∞' : '‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω–∞'}<br>
                <strong>–°–µ–Ω—Å–æ—Ä–Ω—ã–π –≤–≤–æ–¥:</strong> ${analysis.deviceAnalysis.touch ? '‚úÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω' : '‚ùå –ù–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω'}
                ${analysis.deviceAnalysis.touchAnalysis ? `<br><strong>–ú—É–ª—å—Ç–∏-—Ç–∞—á:</strong> ${analysis.deviceAnalysis.touchAnalysis.multiTouch ? '‚úÖ' : '‚ùå'}` : ''}
            </div>

            <div style="background: #ffcdd2; padding: 10px; border-radius: 4px; margin-top: 10px;">
                <strong>üö® –£–≥—Ä–æ–∑—ã –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏:</strong><br>
                ‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –ø–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏–π –æ—Ç–ø–µ—á–∞—Ç–æ–∫ –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏<br>
                ‚Ä¢ –ü–∞—Ç—Ç–µ—Ä–Ω—ã –ø–µ—á–∞—Ç–∏ –∏ –¥–≤–∏–∂–µ–Ω–∏—è –º—ã—à–∏ –∫—Ä–∞–π–Ω–µ —Å–ª–æ–∂–Ω–æ –ø–æ–¥–¥–µ–ª–∞—Ç—å<br>
                ‚Ä¢ –î–∞–Ω–Ω—ã–µ –º–æ–≥—É—Ç –∫–æ—Ä—Ä–µ–ª–∏—Ä–æ–≤–∞—Ç—å—Å—è –º–µ–∂–¥—É —Å–∞–π—Ç–∞–º–∏ –¥–ª—è cross-site tracking<br>
                ‚Ä¢ –ë–∏–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∞—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –≤–æ–∑–º–æ–∂–Ω–∞ –¥–∞–∂–µ –ø—Ä–∏ —Å–º–µ–Ω–µ IP –∏ –±—Ä–∞—É–∑–µ—Ä–∞
            </div>
        `;
        
        resultsDiv.appendChild(resultDiv);
    }

    async executeCrossBrowserTracking() {
        console.log('–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–µ–∂–±—Ä–∞—É–∑–µ—Ä–Ω–æ–π –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏...');
        
        const command = {
            type: 'cross-browser-correlation',
            timestamp: Date.now()
        };

        this.sendRealCommand(command);
        
        const correlation = await this.performCrossBrowserAnalysis();
        this.displayCrossBrowserResults(correlation);
    }

    async performCrossBrowserAnalysis() {
        console.log('–ê–Ω–∞–ª–∏–∑ –º–µ–∂–±—Ä–∞—É–∑–µ—Ä–Ω–æ–π –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏...');
        
        const analysis = {
            browserFingerprint: await this.generateBrowserFingerprint(),
            deviceFingerprint: this.generateDeviceFingerprint(),
            networkFingerprint: await this.generateNetworkFingerprint(),
            correlationFactors: {},
            riskAssessment: {}
        };

        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∞–∫—Ç–æ—Ä—ã –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
        analysis.correlationFactors = this.analyzeCorrelationFactors(analysis);
        analysis.riskAssessment = this.assessCorrelationRisk(analysis);

        return analysis;
    }

    async generateBrowserFingerprint() {
        const fingerprint = {
            userAgent: navigator.userAgent,
            vendor: navigator.vendor,
            platform: navigator.platform,
            language: navigator.language,
            languages: navigator.languages,
            cookieEnabled: navigator.cookieEnabled,
            doNotTrack: navigator.doNotTrack,
            onLine: navigator.onLine,
            hardwareConcurrency: navigator.hardwareConcurrency,
            deviceMemory: navigator.deviceMemory,
            maxTouchPoints: navigator.maxTouchPoints
        };

        // WebGL fingerprint
        fingerprint.webgl = this.getRealWebGLInfo();
        
        // Canvas fingerprint
        fingerprint.canvas = this.getRealCanvasFingerprint();
        
        // Audio context fingerprint
        fingerprint.audioContext = this.getAudioContextFingerprint();
        
        // Screen fingerprint
        fingerprint.screen = {
            width: screen.width,
            height: screen.height,
            colorDepth: screen.colorDepth,
            pixelDepth: screen.pixelDepth,
            pixelRatio: window.devicePixelRatio,
            orientation: screen.orientation ? screen.orientation.type : null
        };

        // Timezone fingerprint
        fingerprint.timezone = {
            offset: new Date().getTimezoneOffset(),
            timezone: Intl.DateTimeFormat().resolvedOptions().timeZone
        };

        return fingerprint;
    }

    getAudioContextFingerprint() {
        try {
            const audioContext = new (window.AudioContext || window.webkitAudioContext)();
            const oscillator = audioContext.createOscillator();
            const analyser = audioContext.createAnalyser();
            const gainNode = audioContext.createGain();
            
            oscillator.connect(analyser);
            analyser.connect(gainNode);
            gainNode.connect(audioContext.destination);
            
            const fingerprint = {
                sampleRate: audioContext.sampleRate,
                maxChannelCount: audioContext.destination.maxChannelCount,
                numberOfInputs: audioContext.destination.numberOfInputs,
                numberOfOutputs: audioContext.destination.numberOfOutputs,
                channelCount: audioContext.destination.channelCount,
                channelCountMode: audioContext.destination.channelCountMode,
                channelInterpretation: audioContext.destination.channelInterpretation
            };
            
            audioContext.close();
            return fingerprint;
        } catch (error) {
            return {error: error.message};
        }
    }

    generateDeviceFingerprint() {
        return {
            screen: {
                total: screen.width * screen.height,
                ratio: screen.width / screen.height,
                colorDepth: screen.colorDepth,
                pixelRatio: window.devicePixelRatio
            },
            memory: performance.memory ? {
                usedJSHeapSize: performance.memory.usedJSHeapSize,
                totalJSHeapSize: performance.memory.totalJSHeapSize,
                jsHeapSizeLimit: performance.memory.jsHeapSizeLimit
            } : null,
            concurrency: navigator.hardwareConcurrency,
            deviceMemory: navigator.deviceMemory,
            connection: navigator.connection ? {
                effectiveType: navigator.connection.effectiveType,
                downlink: navigator.connection.downlink,
                rtt: navigator.connection.rtt
            } : null
        };
    }

    async generateNetworkFingerprint() {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è IP
        const networkData = await this.scanAllRealIPs();
        
        return {
            localIPs: networkData.localIPs,
            publicIPs: networkData.publicIPs,
            mdnsAddresses: networkData.mdnsAddresses,
            onlineStatus: navigator.onLine,
            connection: navigator.connection ? {
                effectiveType: navigator.connection.effectiveType,
                downlink: navigator.connection.downlink,
                rtt: navigator.connection.rtt,
                saveData: navigator.connection.saveData
            } : null
        };
    }

    analyzeCorrelationFactors(analysis) {
        const factors = {};

        // –ê–Ω–∞–ª–∏–∑ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –æ—Ç–ø–µ—á–∞—Ç–∫–æ–≤
        factors.browserStability = this.calculateBrowserStability(analysis.browserFingerprint);
        factors.deviceStability = this.calculateDeviceStability(analysis.deviceFingerprint);
        factors.networkStability = this.calculateNetworkStability(analysis.networkFingerprint);

        // –£–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        factors.uniquenessFactors = {
            canvas: analysis.browserFingerprint.canvas ? analysis.browserFingerprint.canvas.hash : null,
            webgl: analysis.browserFingerprint.webgl ? `${analysis.browserFingerprint.webgl.vendor}_${analysis.browserFingerprint.webgl.renderer}` : null,
            audio: analysis.browserFingerprint.audioContext ? analysis.browserFingerprint.audioContext.sampleRate : null,
            screen: `${analysis.browserFingerprint.screen.width}x${analysis.browserFingerprint.screen.height}x${analysis.browserFingerprint.screen.colorDepth}`
        };

        return factors;
    }

    calculateBrowserStability(browserFP) {
        let stability = 0;
        
        // –°—Ç–∞–±–∏–ª—å–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ (–Ω–µ –∏–∑–º–µ–Ω—è—é—Ç—Å—è –º–µ–∂–¥—É —Å–µ—Å—Å–∏—è–º–∏)
        if (browserFP.vendor) stability += 20;
        if (browserFP.platform) stability += 20;
        if (browserFP.language) stability += 15;
        if (browserFP.hardwareConcurrency) stability += 15;
        if (browserFP.deviceMemory) stability += 10;
        if (browserFP.webgl && browserFP.webgl.renderer) stability += 20;

        return Math.min(stability, 100);
    }

    calculateDeviceStability(deviceFP) {
        let stability = 0;
        
        if (deviceFP.screen.total) stability += 30;
        if (deviceFP.concurrency) stability += 25;
        if (deviceFP.deviceMemory) stability += 25;
        if (deviceFP.memory) stability += 20;

        return Math.min(stability, 100);
    }

    calculateNetworkStability(networkFP) {
        let stability = 0;
        
        // –°–µ—Ç–µ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –º–µ–Ω–µ–µ —Å—Ç–∞–±–∏–ª—å–Ω—ã
        if (networkFP.localIPs.length > 0) stability += 40;
        if (networkFP.publicIPs.length > 0) stability += 30;
        if (networkFP.connection) stability += 30;

        return Math.min(stability, 100);
    }

    assessCorrelationRisk(analysis) {
        const risk = {
            trackingPotential: 0,
            crossBrowserIdentification: 0,
            persistentIdentification: 0,
            overallRisk: 'LOW'
        };

        // –û—Ü–µ–Ω–∫–∞ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–∞ —Ç—Ä–µ–∫–∏–Ω–≥–∞
        risk.trackingPotential = (
            analysis.correlationFactors.browserStability +
            analysis.correlationFactors.deviceStability +
            analysis.correlationFactors.networkStability
        ) / 3;

        // –ú–µ–∂–±—Ä–∞—É–∑–µ—Ä–Ω–∞—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
        const uniqueFactors = Object.values(analysis.correlationFactors.uniquenessFactors).filter(Boolean).length;
        risk.crossBrowserIdentification = Math.min(uniqueFactors * 20, 100);

        // –ü–æ—Å—Ç–æ—è–Ω–Ω–∞—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
        risk.persistentIdentification = Math.max(
            analysis.correlationFactors.browserStability,
            analysis.correlationFactors.deviceStability
        );

        // –û–±—â–∏–π —Ä–∏—Å–∫
        const avgRisk = (risk.trackingPotential + risk.crossBrowserIdentification + risk.persistentIdentification) / 3;
        
        if (avgRisk >= 80) risk.overallRisk = 'CRITICAL';
        else if (avgRisk >= 60) risk.overallRisk = 'HIGH';
        else if (avgRisk >= 40) risk.overallRisk = 'MEDIUM';
        else risk.overallRisk = 'LOW';

        return risk;
    }

    displayCrossBrowserResults(correlation) {
        const resultsDiv = document.getElementById('attackResults');
        const resultDiv = document.createElement('div');
        resultDiv.className = 'critical-result';
        
        resultDiv.innerHTML = `
            <h4>üîó –ú–µ–∂–±—Ä–∞—É–∑–µ—Ä–Ω–∞—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è (–ö–†–ò–¢–ò–ß–ù–û)</h4>
            
            <div style="background: #ffebee; padding: 10px; border-radius: 4px; margin: 10px 0;">
                <strong>‚ö†Ô∏è –û–ë–ù–ê–†–£–ñ–ï–ù –£–ù–ò–ö–ê–õ–¨–ù–´–ô –¶–ò–§–†–û–í–û–ô –û–¢–ü–ï–ß–ê–¢–û–ö</strong><br>
                –û–±—â–∏–π —É—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞: <strong style="color: ${this.getRiskColor(correlation.riskAssessment.overallRisk)}">${correlation.riskAssessment.overallRisk}</strong>
            </div>

            <h5>üìä –ê–Ω–∞–ª–∏–∑ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –æ—Ç–ø–µ—á–∞—Ç–∫–æ–≤:</h5>
            <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 10px; margin: 10px 0;">
                <div style="background: #f5f5f5; padding: 8px; border-radius: 4px;">
                    <strong>–ë—Ä–∞—É–∑–µ—Ä:</strong><br>
                    –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å: ${correlation.correlationFactors.browserStability.toFixed(1)}%<br>
                    <div style="width: 100%; background: #ddd; border-radius: 2px; height: 4px; margin-top: 3px;">
                        <div style="width: ${correlation.correlationFactors.browserStability}%; background: #2196F3; height: 100%; border-radius: 2px;"></div>
                    </div>
                </div>
                <div style="background: #f5f5f5; padding: 8px; border-radius: 4px;">
                    <strong>–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ:</strong><br>
                    –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å: ${correlation.correlationFactors.deviceStability.toFixed(1)}%<br>
                    <div style="width: 100%; background: #ddd; border-radius: 2px; height: 4px; margin-top: 3px;">
                        <div style="width: ${correlation.correlationFactors.deviceStability}%; background: #4CAF50; height: 100%; border-radius: 2px;"></div>
                    </div>
                </div>
                <div style="background: #f5f5f5; padding: 8px; border-radius: 4px;">
                    <strong>–°–µ—Ç—å:</strong><br>
                    –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å: ${correlation.correlationFactors.networkStability.toFixed(1)}%<br>
                    <div style="width: 100%; background: #ddd; border-radius: 2px; height: 4px; margin-top: 3px;">
                        <div style="width: ${correlation.correlationFactors.networkStability}%; background: #FF9800; height: 100%; border-radius: 2px;"></div>
                    </div>
                </div>
            </div>

            <h5>üéØ –§–∞–∫—Ç–æ—Ä—ã —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏:</h5>
            <div style="background: #f5f5f5; padding: 10px; border-radius: 4px;">
                <strong>Canvas Hash:</strong> ${correlation.correlationFactors.uniquenessFactors.canvas || '–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}<br>
                <strong>WebGL:</strong> ${correlation.correlationFactors.uniquenessFactors.webgl || '–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}<br>
                <strong>Audio Context:</strong> ${correlation.correlationFactors.uniquenessFactors.audio || '–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}<br>
                <strong>Screen Signature:</strong> ${correlation.correlationFactors.uniquenessFactors.screen}<br>
            </div>

            <h5>üìà –û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–æ–≤:</h5>
            <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 10px; margin: 10px 0;">
                <div style="background: #f5f5f5; padding: 8px; border-radius: 4px;">
                    <strong>–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª —Ç—Ä–µ–∫–∏–Ω–≥–∞:</strong><br>
                    ${correlation.riskAssessment.trackingPotential.toFixed(1)}%
                </div>
                <div style="background: #f5f5f5; padding: 8px; border-radius: 4px;">
                    <strong>–ú–µ–∂–±—Ä–∞—É–∑–µ—Ä–Ω–∞—è ID:</strong><br>
                    ${correlation.riskAssessment.crossBrowserIdentification.toFixed(1)}%
                </div>
                <div style="background: #f5f5f5; padding: 8px; border-radius: 4px;">
                    <strong>–ü–æ—Å—Ç–æ—è–Ω–Ω–∞—è ID:</strong><br>
                    ${correlation.riskAssessment.persistentIdentification.toFixed(1)}%
                </div>
            </div>

            <div style="background: #ffcdd2; padding: 10px; border-radius: 4px; margin-top: 10px;">
                <strong>üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –≤—ã–≤–æ–¥—ã:</strong><br>
                ‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω–∞—è –∫–æ–º–±–∏–Ω–∞—Ü–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –ø–æ–∑–≤–æ–ª—è–µ—Ç –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –º–µ–∂–¥—É –±—Ä–∞—É–∑–µ—Ä–∞–º–∏<br>
                ‚Ä¢ –¶–∏—Ñ—Ä–æ–≤–æ–π –æ—Ç–ø–µ—á–∞—Ç–æ–∫ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –¥–∞–∂–µ –ø—Ä–∏ —Å–º–µ–Ω–µ IP, cookies –∏ User-Agent<br>
                ‚Ä¢ –í–æ–∑–º–æ–∂–Ω–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —Å–∞–π—Ç–∞—Ö<br>
                ‚Ä¢ –ü–æ–ª–Ω–∞—è –∞–Ω–æ–Ω–∏–º–∏–∑–∞—Ü–∏—è —Ç—Ä–µ–±—É–µ—Ç –∫–∞—Ä–¥–∏–Ω–∞–ª—å–Ω—ã—Ö –º–µ—Ä –∑–∞—â–∏—Ç—ã
            </div>
        `;
        
        resultsDiv.appendChild(resultDiv);
    }

    // –≠–¢–ê–ü 5: –ì–ï–ù–ï–†–ê–¶–ò–Ø –û–¢–ß–ï–¢–û–í

    generateFullReport() {
        console.log('–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ fingerprinting...');
        
        const report = {
            timestamp: new Date().toISOString(),
            sessionId: this.generateSessionId(),
            mdnsAddresses: this.mdnsAddresses,
            fingerprintData: this.fingerprintData,
            summary: this.generateReportSummary(),
            riskAssessment: this.generateRiskAssessment(),
            recommendations: this.generateRecommendations()
        };

        this.displayFullReport(report);
        this.reportData = report; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
    }

    generateSessionId() {
        return 'session-' + Math.random().toString(36).substr(2, 9) + '-' + Date.now();
    }

    generateReportSummary() {
        const summary = {
            mdnsFound: this.mdnsAddresses.length,
            testsCompleted: Object.keys(this.fingerprintData).length,
            criticalFindings: 0,
            uniquenessScore: 0
        };

        // –ü–æ–¥—Å—á–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –Ω–∞—Ö–æ–¥–æ–∫
        if (this.fingerprintData['local-scan-results']) summary.criticalFindings++;
        if (this.fingerprintData['vpn-bypass-results']) summary.criticalFindings++;
        if (this.fingerprintData['behavior-results']) summary.criticalFindings++;
        if (this.fingerprintData['cross-browser-results']) summary.criticalFindings++;

        // –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
        const factors = [
            this.mdnsAddresses.length > 0 ? 20 : 0,
            Object.keys(this.fingerprintData).length * 5,
            summary.criticalFindings * 15
        ];
        
        summary.uniquenessScore = Math.min(factors.reduce((a, b) => a + b, 0), 100);

        return summary;
    }

    generateRiskAssessment() {
        const risks = {
            privacy: 'LOW',
            tracking: 'LOW',  
            identification: 'LOW',
            overall: 'LOW'
        };

        let riskScore = 0;

        // –û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–æ–≤ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏
        if (this.mdnsAddresses.length > 0) riskScore += 25;
        if (this.fingerprintData['vpn-bypass-results']) riskScore += 30;
        if (this.fingerprintData['local-scan-results']) riskScore += 25;
        if (this.fingerprintData['behavior-results']) riskScore += 20;

        if (riskScore >= 75) {
            risks.privacy = 'CRITICAL';
            risks.tracking = 'HIGH';
            risks.identification = 'HIGH';
            risks.overall = 'CRITICAL';
        } else if (riskScore >= 50) {
            risks.privacy = 'HIGH';
            risks.tracking = 'MEDIUM';
            risks.identification = 'MEDIUM';
            risks.overall = 'HIGH';
        } else if (riskScore >= 25) {
            risks.privacy = 'MEDIUM';
            risks.tracking = 'LOW';
            risks.identification = 'LOW';
            risks.overall = 'MEDIUM';
        }

        return {risks, score: riskScore};
    }

    generateRecommendations() {
        const recommendations = [];

        if (this.mdnsAddresses.length > 0) {
            recommendations.push({
                severity: 'HIGH',
                issue: 'mDNS –∞–¥—Ä–µ—Å–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã',
                recommendation: '–û—Ç–∫–ª—é—á–∏—Ç–µ WebRTC –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ WebRTC —É—Ç–µ—á–µ–∫'
            });
        }

        if (this.fingerprintData['vpn-bypass-results']) {
            recommendations.push({
                severity: 'CRITICAL',
                issue: '–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã VPN —É—Ç–µ—á–∫–∏',
                recommendation: '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ VPN —Å WebRTC protection –∏–ª–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç–∫–ª—é—á–∏—Ç–µ WebRTC'
            });
        }

        if (this.fingerprintData['local-scan-results']) {
            recommendations.push({
                severity: 'HIGH',
                issue: '–í–æ–∑–º–æ–∂–Ω–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏',
                recommendation: '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–∞–π—Ä–≤–æ–ª –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –æ—Ç –±—Ä–∞—É–∑–µ—Ä–∞'
            });
        }

        if (this.fingerprintData['behavior-results']) {
            recommendations.push({
                severity: 'MEDIUM',
                issue: '–°–æ–±—Ä–∞–Ω –ø–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏–π –æ—Ç–ø–µ—á–∞—Ç–æ–∫',
                recommendation: '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —Ä–∞–Ω–¥–æ–º–∏–∑–∞—Ü–∏–∏ –ø–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤'
            });
        }

        // –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        recommendations.push({
            severity: 'INFO',
            issue: '–û–±—â–∏–µ –º–µ—Ä—ã –∑–∞—â–∏—Ç—ã',
            recommendation: '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Tor Browser, –∞–Ω—Ç–∏–¥–µ—Ç–µ–∫—Ç-–±—Ä–∞—É–∑–µ—Ä—ã –∏–ª–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –¥–ª—è –∑–∞—â–∏—Ç—ã –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏'
        });

        return recommendations;
    }

    displayFullReport(report) {
        const resultsDiv = document.getElementById('finalResults');
        resultsDiv.innerHTML = `
            <div class="fingerprint-result">
                <h3>üìä –ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç Advanced Fingerprinting</h3>
                
                <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px; margin: 15px 0;">
                    <div style="background: #e3f2fd; padding: 10px; border-radius: 4px;">
                        <strong>Session ID:</strong><br>
                        <code>${report.sessionId}</code>
                    </div>
                    <div style="background: #f3e5f5; padding: 10px; border-radius: 4px;">
                        <strong>mDNS –∞–¥—Ä–µ—Å–æ–≤:</strong><br>
                        ${report.summary.mdnsFound}
                    </div>
                    <div style="background: #e8f5e8; padding: 10px; border-radius: 4px;">
                        <strong>–¢–µ—Å—Ç–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ:</strong><br>
                        ${report.summary.testsCompleted}
                    </div>
                    <div style="background: #fff3e0; padding: 10px; border-radius: 4px;">
                        <strong>–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –Ω–∞—Ö–æ–¥–æ–∫:</strong><br>
                        ${report.summary.criticalFindings}
                    </div>
                </div>

                <h4>üéØ –û—Ü–µ–Ω–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏: ${report.summary.uniquenessScore}/100</h4>
                <div style="width: 100%; background: #ddd; border-radius: 4px; height: 8px; margin: 10px 0;">
                    <div style="width: ${report.summary.uniquenessScore}%; background: linear-gradient(45deg, #667eea, #764ba2); height: 100%; border-radius: 4px;"></div>
                </div>

                <h4>‚ö†Ô∏è –û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–æ–≤:</h4>
                <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(150px, 1fr)); gap: 10px; margin: 10px 0;">
                    <div style="text-align: center;">
                        <strong>–ü—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å</strong><br>
                        <span style="color: ${this.getRiskColor(report.riskAssessment.risks.privacy)}">${report.riskAssessment.risks.privacy}</span>
                    </div>
                    <div style="text-align: center;">
                        <strong>–¢—Ä–µ–∫–∏–Ω–≥</strong><br>
                        <span style="color: ${this.getRiskColor(report.riskAssessment.risks.tracking)}">${report.riskAssessment.risks.tracking}</span>
                    </div>
                    <div style="text-align: center;">
                        <strong>–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è</strong><br>
                        <span style="color: ${this.getRiskColor(report.riskAssessment.risks.identification)}">${report.riskAssessment.risks.identification}</span>
                    </div>
                    <div style="text-align: center;">
                        <strong>–û–±—â–∏–π —Ä–∏—Å–∫</strong><br>
                        <span style="color: ${this.getRiskColor(report.riskAssessment.risks.overall)}; font-weight: bold;">${report.riskAssessment.risks.overall}</span>
                    </div>
                </div>

                <h4>üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∑–∞—â–∏—Ç–µ:</h4>
                <div style="margin: 10px 0;">
                    ${report.recommendations.map(rec => `
                        <div style="background: ${this.getRecommendationColor(rec.severity)}; padding: 8px; margin: 5px 0; border-radius: 4px; border-left: 3px solid ${this.getRecommendationBorderColor(rec.severity)};">
                            <strong>${rec.severity}:</strong> ${rec.issue}<br>
                            <small>${rec.recommendation}</small>
                        </div>
                    `).join('')}
                </div>

                <details style="margin-top: 15px;">
                    <summary>üìã –î–µ—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç—á–µ—Ç–∞</summary>
                    <pre style="background: #f5f5f5; padding: 10px; border-radius: 4px; overflow-x: auto; font-size: 10px;">${JSON.stringify(report, null, 2)}</pre>
                </details>
            </div>
        `;

        document.getElementById('step6').classList.add('active');
    }

    getRiskColor(level) {
        switch (level) {
            case 'CRITICAL': return '#d32f2f';
            case 'HIGH': return '#f57c00';
            case 'MEDIUM': return '#fbc02d';
            case 'LOW': return '#388e3c';
            default: return '#666';
        }
    }

    getRecommendationColor(severity) {
        switch (severity) {
            case 'CRITICAL': return '#ffebee';
            case 'HIGH': return '#fff3e0';
            case 'MEDIUM': return '#fffde7';
            case 'LOW': return '#e8f5e8';
            case 'INFO': return '#e3f2fd';
            default: return '#f5f5f5';
        }
    }

    getRecommendationBorderColor(severity) {
        switch (severity) {
            case 'CRITICAL': return '#f44336';
            case 'HIGH': return '#ff9800';
            case 'MEDIUM': return '#ffeb3b';
            case 'LOW': return '#4caf50';
            case 'INFO': return '#2196f3';
            default: return '#ccc';
        }
    }

    exportFingerprint() {
        if (!this.reportData) {
            alert('–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –æ—Ç—á–µ—Ç!');
            return;
        }

        const exportData = {
            ...this.reportData,
            exportTimestamp: new Date().toISOString(),
            version: '1.0',
            source: 'Advanced mDNS Fingerprinting System'
        };

        const blob = new Blob([JSON.stringify(exportData, null, 2)], {
            type: 'application/json'
        });
        
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `fingerprint-report-${Date.now()}.json`;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        URL.revokeObjectURL(url);

        console.log('–û—Ç—á–µ—Ç —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω:', exportData);
    }

    clearCommandQueue() {
        document.getElementById('commandQueue').innerHTML = '';
        console.log('–û—á–µ—Ä–µ–¥—å –∫–æ–º–∞–Ω–¥ –æ—á–∏—â–µ–Ω–∞');
    }

    // –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π (sendRealCommand, logCommand, —É—Ç–∏–ª–∏—Ç—ã –∏ —Ç.–¥.)
    sendRealCommand(command) {
        console.log('–û—Ç–ø—Ä–∞–≤–∫–∞ –†–ï–ê–õ–¨–ù–û–ô –∫–æ–º–∞–Ω–¥—ã:', command);
        
        if (this.dataChannel && this.dataChannel.readyState === 'open') {
            this.dataChannel.send(JSON.stringify(command));
            console.log('–ö–æ–º–∞–Ω–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —á–µ—Ä–µ–∑ DataChannel');
        } else {
            console.log('DataChannel –Ω–µ –≥–æ—Ç–æ–≤, –∫–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω–æ');
        }

        this.logCommand(command);
    }

    handleRealDataChannelMessage(data) {
        try {
            const message = JSON.parse(data);
            console.log('–ü–æ–ª—É—á–µ–Ω–æ —Ä–µ–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:', message);
            this.processRealCommand(message);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
        }
    }

    processRealCommand(command) {
        console.log('–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∞–ª—å–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã:', command);
        
        switch (command.type) {
            case 'create-stun-connection':
                this.executeRealSTUNRequests(command.config.iceServers)
                    .then(results => {
                        this.dataChannel.send(JSON.stringify({
                            type: 'stun-results',
                            originalCommand: command,
                            results: results,
                            timestamp: Date.now()
                        }));
                    });
                break;
                
            case 'hardware-fingerprint':
                const hardwareInfo = this.getRealHardwareInfo();
                this.dataChannel.send(JSON.stringify({
                    type: 'hardware-results',
                    originalCommand: command,
                    results: hardwareInfo,
                    timestamp: Date.now()
                }));
                break;
                
            default:
                console.log('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞:', command.type);
        }
    }

    logCommand(command) {
        const commandQueue = document.getElementById('commandQueue');
        const commandDiv = document.createElement('div');
        commandDiv.style.cssText = 'margin: 5px 0; padding: 8px; background: white; border-radius: 4px; border-left: 3px solid #2196F3;';
        commandDiv.innerHTML = `
            <strong>–†–ï–ê–õ–¨–ù–ê–Ø –∫–æ–º–∞–Ω–¥–∞: ${command.type}</strong><br>
            <small>–í—Ä–µ–º—è: ${new Date().toLocaleTimeString()}</small><br>
            <details>
                <summary>–î–µ—Ç–∞–ª–∏ –∫–æ–º–∞–Ω–¥—ã</summary>
                <pre style="font-size: 10px;">${JSON.stringify(command, null, 2)}</pre>
            </details>
        `;
        commandQueue.appendChild(commandDiv);
        commandQueue.scrollTop = commandQueue.scrollHeight;
    }

    updateStatus(elementId, status, text) {
        const element = document.getElementById(elementId);
        if (element) {
            element.className = `status ${status}`;
            element.textContent = text;
        }
    }

    updateProgress(elementId, percent) {
        const element = document.getElementById(elementId);
        if (element) {
            element.style.width = `${percent}%`;
        }
    }

    completeMDNSDiscovery() {
        this.updateProgress('progress1', 100);
        
        if (this.mdnsAddresses.length === 0) {
            this.handleNoMDNSFound();
        } else {
            const resultsDiv = document.getElementById('mdnsResults');
            const summaryDiv = document.createElement('div');
            summaryDiv.className = 'fingerprint-result';
            summaryDiv.innerHTML = `
                <h4>‚úÖ –ù–∞–π–¥–µ–Ω–æ ${this.mdnsAddresses.length} –†–ï–ê–õ–¨–ù–´–• mDNS –∞–¥—Ä–µ—Å–∞</h4>
                <p>–ì–æ—Ç–æ–≤ –∫ —É—Å—Ç–∞–Ω–æ–≤–∫–µ P2P —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ —ç—Ç–∏ –∞–¥—Ä–µ—Å–∞</p>
            `;
            resultsDiv.appendChild(summaryDiv);
            
            document.getElementById('step1').classList.add('active');
            document.getElementById('p2pBtn').disabled = false;
        }
    }

    handleNoMDNSFound() {
        document.getElementById('step1').classList.add('error');
        const resultsDiv = document.getElementById('mdnsResults');
        resultsDiv.innerHTML = `
            <div class="attack-result">
                <h3>‚ö†Ô∏è mDNS –∞–¥—Ä–µ—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</h3>
                <p>mDNS –æ–±—Ñ—É—Å–∫–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞ –∏–ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ IP</p>
                <button onclick="realFingerprinter.findMDNSAddresses()">–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–∏—Å–∫</button>
            </div>
        `;
    }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
const realFingerprinter = new RealMDNSFingerprinter();

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫
function findMDNSAddresses() {
    realFingerprinter.findLocalAddresses(); // –ò–∑–º–µ–Ω–µ–Ω–æ!
}


function establishP2PConnection() {
    realFingerprinter.establishP2PConnection();
}

function executeSTUNFingerprint() {
    realFingerprinter.executeSTUNFingerprint();
}

function executeNetworkScan() {
    realFingerprinter.executeNetworkScan();
}

function executeHardwareFingerprint() {
    realFingerprinter.executeHardwareFingerprint();
}

function executeBrowserCapabilities() {
    realFingerprinter.executeBrowserCapabilities();
}

function executeLocalNetworkScan() {
    realFingerprinter.executeLocalNetworkScan();
}

function executeVPNBypass() {
    realFingerprinter.executeVPNBypass();
}

function executeBehaviorTracking() {
    realFingerprinter.executeBehaviorTracking();
}

function executeCrossBrowserTracking() {
    realFingerprinter.executeCrossBrowserTracking();
}

function generateFullReport() {
    realFingerprinter.generateFullReport();
}

function exportFingerprint() {
    realFingerprinter.exportFingerprint();
}

function clearCommandQueue() {
    realFingerprinter.clearCommandQueue();
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
document.addEventListener('DOMContentLoaded', () => {
    console.log('–ü–û–õ–ù–´–ô mDNS Fingerprinting System –∑–∞–≥—Ä—É–∂–µ–Ω');
    console.log('–í—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –ø–æ-–Ω–∞—Å—Ç–æ—è—â–µ–º—É, –≤–∫–ª—é—á–∞—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã');
});
